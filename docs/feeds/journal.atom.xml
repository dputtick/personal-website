<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan Puttick - journal</title><link href="https://www.danielputtick.com/" rel="alternate"></link><link href="https://www.danielputtick.com/feeds/journal.atom.xml" rel="self"></link><id>https://www.danielputtick.com/</id><updated>2020-04-30T00:00:00-04:00</updated><entry><title>Long-term outlook for COVID-19</title><link href="https://www.danielputtick.com/journal/covid-19-long-term.html" rel="alternate"></link><published>2020-04-30T00:00:00-04:00</published><updated>2020-04-30T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-30:/journal/covid-19-long-term.html</id><summary type="html">&lt;p&gt;We&amp;#8217;re now at about five weeks since the start of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 lockdown in New York. I&amp;#8217;ve found myself thinking more about the long-term future. I don&amp;#8217;t have real expertise on any of these topics, and I&amp;#8217;m hesitant to speculate excessively. However, many of us …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We&amp;#8217;re now at about five weeks since the start of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 lockdown in New York. I&amp;#8217;ve found myself thinking more about the long-term future. I don&amp;#8217;t have real expertise on any of these topics, and I&amp;#8217;m hesitant to speculate excessively. However, many of us are finding ourselves needing to make decisions with incomplete information and without the benefit of expert opinions that we can trust. I&amp;#8217;m sure there are many people out there who would have useful advice for me, but it&amp;#8217;s not readily apparent who they are. I wouldn&amp;#8217;t take anything I say below as direct advice: think things through for yourself and draw your own&amp;nbsp;conclusions.&lt;/p&gt;
&lt;p&gt;At some point, stay at home orders will be lifted. But, it seems likely that people will continue to behave differently than they did when &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 wasn&amp;#8217;t a risk. If they have the option to work from home, they&amp;#8217;ll probably continue to do so. Working from home is a skill that can be improved at — people will have had time to improve at it. They will now have comfortable (or at least functional) home offices. They will have routines for buying groceries and cooking. Why risk going into the office? Childcare will continue to be a problem. Those that can afford not to will avoid sending their children to summer camp. The risk of them getting sick or bringing the disease home with them will mostly be viewed as not worthwhile. Together, all of these things will create inertia. They will ensure that things continue largely as they have over the last month. There will certainly be exceptions, like the flood of people trying to get a hair cut. But, there will not be a matching flood of people eating out at restaurants, going on vacation,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;As a result, the various factors that are affecting the economy seem unlikely to change much. To be clear, I&amp;#8217;m not sure &amp;#8220;the economy&amp;#8221; in terms of &lt;span class="caps"&gt;GDP&lt;/span&gt; or public company performance matters much to me directly. But, our current economic system depends heavily on using employment to distribute resources. Drastic increases in unmployment lead to people unable to get healthcare, pay rent, or perhaps even afford food. I don&amp;#8217;t think I&amp;#8217;m able to make specific predictions about the second-order effects of pausing large swathes of the economy. But, on-balance, it seems like decreases in employment, production, and consumption will lead to a reduction in human&amp;nbsp;flourishing.&lt;/p&gt;
&lt;p&gt;Some seem to be anticipating a possible &amp;#8220;quick&amp;#8221; recovery because the underlying fundamentals of the businesses that are struggling haven&amp;#8217;t changed. If you&amp;#8217;re a restaurant that was popular, nothing that influences that popularity will have changed. Your customers still like your food. So, if you &amp;#8220;unpause&amp;#8221; the economy, things will go back to how they were quickly. That doesn&amp;#8217;t make sense to me. If you sell clothing, or air travel, or hotel rooms, or the experience of eating at a restaurant, demand for your product has decreased, and not just because of a stay at home order. People are less likely to buy from you until they&amp;#8217;re no longer scared of getting sick. And, even if you somehow make those fears magically vanish, can you rehire all of the skilled employees you laid off? What about the money you owe your landlord? What if your customers have lost their jobs or are otherwise less economically&amp;nbsp;secure?&lt;/p&gt;
&lt;p&gt;So, what does change after stay at home orders end and the initial surge of cases is contained? It&amp;#8217;s likely that many businesses that can only exist in-person will try to figure out how to stay open while simultaneously protecting their customers. I&amp;#8217;m imagining barber shops only allowing two customers at a time, or restaurants with one-third as many tables. These measures will vary in their effectiveness, and it will be very hard to know which are effective. We&amp;#8217;ll probably enter a period of &amp;#8220;security theater&amp;#8221;, performing some rituals with questionable usefulness just because they&amp;#8217;re expected of&amp;nbsp;us.&lt;/p&gt;
&lt;h2&gt;What questions remain&amp;nbsp;unanswered?&lt;/h2&gt;
&lt;p&gt;Most thinking about the future involves more asking questions than answers. Here are a bunch of things I have lots of uncertainty&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can local/state/federal governments effectively scale up testing, both for active cases and protective antibodies?&lt;/strong&gt; At first, the answer to this seemed to be &amp;#8220;no&amp;#8221;. Recently, it&amp;#8217;s shifting towards &amp;#8220;maybe&amp;#8221;. In the most hard-hit areas, testing capacity has increased dramatically. Given the collective benefits, it doesn&amp;#8217;t seem like there will be issues around financial access to testing. That might change if the situation requires a prolonged period of extensive and ongoing testing. There is also the chance that test reagents availability might limit large-scale&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can governments combine test availability with active tracing?&lt;/strong&gt; In my interpretation, &amp;#8220;active tracing&amp;#8221; means something like: if you test positive, everybody you came into direct contact with over the last n days gets a phone call asking them to come in for a test. This seems more difficult to implement than widespread testing. It involves hiring a large temporary workforce, working across state lines without a comprehensive national &lt;span class="caps"&gt;ID&lt;/span&gt; system, and possibly complex technology-dependent solutions. The difficulties of administering a program like this might be insurmountable for governments in the &lt;span class="caps"&gt;U.S.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Will testing and contact tracing be enough to keep the rate of new cases low and constant, or will we face repeated spikes of new cases?&lt;/strong&gt; This seems difficult to predict without more data. If South Korea (seemingly the most effective deployment of this strategy) continues to successfully sustain a low new case rate, that would be a powerful signal that this strategy can&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can an effective vaccine for coronavirus be made?&lt;/strong&gt; There&amp;#8217;s evidence that an effective vaccine isn&amp;#8217;t a slam dunk. Other coronaviruses mutate quickly and seem to have proven difficult to create vaccines for. One prominent example of this is the common cold. That said, a vaccine would be valuable even if it requires multiple doses, or a yearly booster, or has limited efficacy like the flu&amp;nbsp;vaccine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How long will it take to develop, test, and deploy a vaccine?&lt;/strong&gt; Current estimates suggest the earliest date a vaccine will be ready to be mass-produced and deployed would be early 2021. That&amp;#8217;s if everything goes according to plan. The deployment phase would depend a lot on how the vaccine is produced, but is likely to be on the order of months or even&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How long does immunity to covid-19 last?&lt;/strong&gt; The evidence does suggest that our immune systems produce antibodies specific to &lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-19, and that they are effective, at least for a few months. It&amp;#8217;s possible (maybe likely?) that immunity will decline over time, but still provide some protection. The 1918 flu was deadly due to being caused a new strain of flu virus, but that same strain now circulates in the population without being nearly as&amp;nbsp;deadly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How aggressive is the federal government willing to be about using its powers to support individuals and businesses?&lt;/strong&gt; So far, there has been willingness to take actions that I would classify as politically &amp;#8220;unexpected&amp;#8221;. See: giving out $1200 checks, given the ideology of the party in control of the Senate and the Presidency. The federal government can more or less print as much money as it wants, subject to the risks of doing so. It could pay the rent and unemployment of every person/business affected by coronavirus, if it chooses to. That seems unlikely. So, on a spectrum from &lt;em&gt;that&lt;/em&gt; to nothing, what will it&amp;nbsp;do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the risk tolerance of a typical person? How do they respond to the individual risk they face and the collective risk their community faces once the government is no longer making the risk-tolerance decision for them via a lockdown?&lt;/strong&gt; I&amp;#8217;m not sure how to even begin answering this, other than &amp;#8220;wait and&amp;nbsp;see&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the hidden, second-order risks that aren&amp;#8217;t being considered yet?&lt;/strong&gt; An example: what happens when everybody is working from home and starts using their air conditioning all day during the summer? I&amp;#8217;m guessing cooling a bunch of individual dwellings requires more power than office air conditioning. So, how much extra demand can the power grid&amp;nbsp;support?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How effectively will &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 spread in rural areas?&lt;/strong&gt; So far, the major outbreaks (in the U.S.) have exclusively been in urban and suburban areas. Will the smaller social networks and lack of density in rural areas be sufficiently protective? Or will those areas be just as badly affected, but on a delayed&amp;nbsp;timeline?&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>My COVID-19 experience</title><link href="https://www.danielputtick.com/journal/covid-19-experience.html" rel="alternate"></link><published>2020-04-28T00:00:00-04:00</published><updated>2020-04-28T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-28:/journal/covid-19-experience.html</id><summary type="html">&lt;p&gt;I thought it might be interesting to write some notes on my experience of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19/&lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 pandemic so far. There are no doubt many of these on the internet, but so far I&amp;#8217;ve found each of them interesting to read. It seems worth writing mine down …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought it might be interesting to write some notes on my experience of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19/&lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 pandemic so far. There are no doubt many of these on the internet, but so far I&amp;#8217;ve found each of them interesting to read. It seems worth writing mine down as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;In January I first starting learning about the emerging disease in China, but didn&amp;#8217;t immediately pay it close attention. On February 8th, I was killing time reading the news while waiting for a friend. Somehow, a specific series of news stories about the situation led me to think through possible outcomes in a way I hadn&amp;#8217;t previously. I can remember making a few logical leaps in a row. First, it seemed unlikely that containment efforts had been completely effective. Wuhan has more than 10 million residents: preventing the travel of every single contagious individual sounds like an impossible task. Second, the apparent rapid spread of the disease combined with the likely inability of other governments to impose containment as vigorously as China would lead to inevitable spread in other countries. Third, the interconnectedness of the global economy meant that a meaningful economic impact would occur everywhere regardless of how widely the virus&amp;nbsp;spread.&lt;/p&gt;
&lt;p&gt;This felt like seeing something that could not be unseen. Over the course of the next few days, I felt plenty of anxiety and sadness. I also took a few immediate actions. I adjusted my savings to be more resilient to a financial downturn. This basically meant selling shares of a Vanguard S&amp;amp;P500 &lt;span class="caps"&gt;ETF&lt;/span&gt; and buying a short-term government bond fund. I also changed my plans around looking for my full-time work. Rather than waiting to look for a job for few more months, I started my search immediately. Hindsight bias makes statements like these barely worth the &amp;#8220;paper&amp;#8221; they&amp;#8217;re written on, but I&amp;#8217;d say I was considering at least a 20% chance of a recession comparable in magnitude to 2008-2009, and maybe a 50% chance of a noticeable but more mild economic downtown of some sort. At the time, when I brought up my point of view with a few friends, most of them more or less agreed with my logic, but also thought I was being overly concerned. That week, I also went and purchased a 32oz bottle of hand sanitizer. There were dozens of them on the&amp;nbsp;shelf.&lt;/p&gt;
&lt;p&gt;On the first weekend of March, I flew to Miami for a short trip with a few friends. The following week, one of them came down with a fever and dry cough. That, despite not having any exposure to known cases or international travel. After a week&amp;#8217;s delay, he managed to get tested for &lt;span class="caps"&gt;COVID&lt;/span&gt;-19. Around then, I noticed I was feeling unusual shortness of breath going up stairs, a mild cough, and some chest tightness. When his test came back positive after five days, it seemed extremely likely that I had the virus as well. Luckily, my symptoms were extremely mild. I had about two weeks of similar fatigue, but no fever. I&amp;#8217;m still not even positive I had the disease, because getting tested in New York was virtually impossible at the time without going to the&amp;nbsp;hospital.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m writing this on April 28th. Luckily, I&amp;#8217;ve managed to land a job offer, despite hearing of many companies conducting layoffs and having several companies I was in contact with pause their hiring processes. Overall, job searching felt like the part of musical chairs after the music turns off. It seems many of us have started to settle into our quarantine routines. After the short-term anxiety and new developments every day comes the long-term anxiety of waiting to see when things will start going back to normal, and wondering what &amp;#8220;normal&amp;#8221; will look&amp;nbsp;like.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Site update</title><link href="https://www.danielputtick.com/journal/site-update.html" rel="alternate"></link><published>2020-04-20T00:00:00-04:00</published><updated>2020-04-20T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-20:/journal/site-update.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve taken advantage of some free time to make some design and functionality changes to this site. The most notable of these is that I&amp;#8217;ve split written content into two categories: &amp;#8220;writing&amp;#8221; and &amp;#8220;journal&amp;#8221;. I&amp;#8217;d like to make it easier for myself to write more frequently and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve taken advantage of some free time to make some design and functionality changes to this site. The most notable of these is that I&amp;#8217;ve split written content into two categories: &amp;#8220;writing&amp;#8221; and &amp;#8220;journal&amp;#8221;. I&amp;#8217;d like to make it easier for myself to write more frequently and in smaller, less thoroughly-edited chunks. I think the barrier there is largely psychological, and I&amp;#8217;m hoping this well help. The &amp;#8220;journal&amp;#8221; will be things I&amp;#8217;ve written in one sitting, with perhaps a single pass of editing. I won&amp;#8217;t try to guarantee that they&amp;#8217;re accurate, well-written, well-thought-out, unique, etc. Many of them might end up being titled with just a date. The &amp;#8220;writing&amp;#8221; section will be longer pieces that I&amp;#8217;ve invested some amount of effort into. I&amp;#8217;ll intend to make them evergreen, and update them if I have changes to my thinking. It&amp;#8217;s possible that some pieces will start out as journal entries before morphing into full-on writing: that&amp;#8217;s another goal of this&amp;nbsp;experiment.&lt;/p&gt;
&lt;p&gt;Along with the main Atom feed, the two categories have their own Atom feeds, to make it easy to follow them separately. I&amp;#8217;ve sorted my existing writing into the two categories based on how well I feel they&amp;#8217;ve held&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In terms of design tweaks, I threw out the Pelican theme I had chosen and lightly modified to my liking and wrote my own html/css from scratch. I found it was noticeably different to think about the &amp;#8220;right&amp;#8221; way to do things rather than just tweaking values until it looked the way I hoped. I also had to learn some details of a few css techniques I had only heard about previously, such as flexbox. The performance still isn&amp;#8217;t as snappy as I&amp;#8217;d want it. After some brief profiling it seems likely there are some gains to be had from optimizing and minifying the css I wrote. But, I think it will do for&amp;nbsp;now.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Writing a postmortem: an interview exercise I really like</title><link href="https://www.danielputtick.com/journal/mapbox-postmortem-interview.html" rel="alternate"></link><published>2017-10-31T15:30:00-04:00</published><updated>2017-10-31T15:30:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-10-31:/journal/mapbox-postmortem-interview.html</id><summary type="html">&lt;p&gt;First, some exciting news that&amp;#8217;s relevant as context: starting in November, I&amp;#8217;ll be joining &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; in their Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; office. One thing that made me excited about joining Mapbox was how much I enjoyed their &lt;a href="https://blog.mapbox.com/how-we-hire-at-mapbox-cd946418299f"&gt;interview process&lt;/a&gt;. No part of it felt like it required extra &amp;#8220;preparation&amp;#8221; and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, some exciting news that&amp;#8217;s relevant as context: starting in November, I&amp;#8217;ll be joining &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; in their Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; office. One thing that made me excited about joining Mapbox was how much I enjoyed their &lt;a href="https://blog.mapbox.com/how-we-hire-at-mapbox-cd946418299f"&gt;interview process&lt;/a&gt;. No part of it felt like it required extra &amp;#8220;preparation&amp;#8221; and it was clear that some significant thought had been put into its design. In my opinion, this is a pretty useful signal about an engineering organization. If we accept that finding great engineers (by whatever definition of &amp;#8220;great&amp;#8221; you subscribe to) is one of the largest contributors to the success of any company, it&amp;#8217;s possible that a company with an interview process that appears disorganized or nonsensical is otherwise well-functioning, but it&amp;#8217;s probably at least somewhat less&amp;nbsp;likely.&lt;/p&gt;
&lt;p&gt;One aspect of the Mapbox interview process that I particularly liked was their request that I write a blameless postmortem as a take-home exercise. If the term is unfamiliar, postmortems are a tool designed to help facilitate a culture of building institutional knowledge and learning from the past. Whenever something goes wrong – an outage, bug in production, failure to meet an &lt;span class="caps"&gt;SLA&lt;/span&gt;, etc – anybody involved in the situation can call for a postmortem. The postmortem takes the form of a shared document where everybody can contribute their account of the incident to help identify its ultimate causes and propose changes to prevent it from happening again. The &amp;#8220;blameless&amp;#8221; aspect is crucial: a good postmortem avoids conclusions like &amp;#8220;Dan wrote a bug and it brought down our service&amp;#8221; and instead says &amp;#8220;Dan wrote a bug and it brought down the service: we need to improve our testing and deployment processes to make sure that they catch this category of bugs in the future.&amp;#8221; For many mistakes that initially look like they ought to be blamed on an individual, it&amp;#8217;s possible to identify a deficiency in a process as the root cause. You can read more about blameless postmortems in the &lt;a href="https://landing.google.com/sre/book/chapters/postmortem-culture.html"&gt;Google &lt;span class="caps"&gt;SRE&lt;/span&gt; book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I thought this exercise was a great interview question because it lets the reader learn more about several different attributes that one might associate with good&amp;nbsp;programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s a sample of the type of written communication you&amp;#8217;ll be doing frequently in a work environment. Between documentation, taking notes while working, design documents, commit messages, chat, and email, programmers can produce significantly more prose than  code. Being able to express technical concepts clearly, unambiguously, and succinctly is essential. I may be wrong, but I sometimes get the feeling that this is widely acknowledged, but without the accompanying recognition that writing is a skill that can be improved relatively easily. Producing excellent writing might take a lot of work, but learning to write &lt;em&gt;decently&lt;/em&gt; isn&amp;#8217;t that different from improving as a programmer: it takes building up experience, practicing deliberately, taking the time to revise repeatedly, and getting constructive&amp;nbsp;feedback.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s a great way for the writer to demonstrate their ability to assume the perspective of others. So much of being a good engineer is having empathy for your users and the other programmers who will read, modify, or interact with your code. Writing a useful postmortem necessarily requires empathy, because you have to put yourself in the shoes of everybody involved in the incident and understand what they were thinking and why they took the actions they&amp;nbsp;did.&lt;/li&gt;
&lt;li&gt;It helps assess the writer&amp;#8217;s ability to think critically and logically about a complex chain of events. Imagining all possible contributing factors to an incident and identifying the various links of causality is the same type of thinking as is required when trying to think of edge cases or identify the tradeoffs and compromises in a system&amp;#8217;s design. Finding ultimate rather than proximate causes, dismissing alternate explanations, and considering counterfactuals are all closely related to the type of critical thinking involved in debugging software or troubleshooting&amp;nbsp;systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I sat down to write my postmortem, I wasn&amp;#8217;t sure whether to analyze a programming-related incident or choose something else. The instructions said the postmortem could be about anything I liked, and I decided it might be fun to write about a certain eventful and unusual accident that happened to me a few years ago. What I wrote is definitely not perfect, it&amp;#8217;s just one example, and there&amp;#8217;s no one &amp;#8220;right&amp;#8221; way to format or organize a postmortem. Anyway, I&amp;#8217;m excited about the new job, and feel free to reach out if you&amp;#8217;re curious about the Mapbox hiring process or what it&amp;#8217;s like to work there (you should probably give me some time after I&amp;#8217;ve started for the latter). Here&amp;#8217;s what I sent the hiring team, unedited, in&amp;nbsp;full:&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I chose this incident by thinking, “what’s the most memorable unfortunate thing that I’ve been involved in over the past few years?” For context, in 2014 I had purchased an old, smallish (28 foot) sailboat. At the time I had some extra savings, and decided that it would be a enjoyable way to pass the summertime in Boston. I stored the boat on a mooring near Boston Harbor and sailed it frequently in 2014 and&amp;nbsp;2015.&lt;/p&gt;
&lt;p&gt;One weekend in October 2015, I decided to sail to nearby Cohasset Harbor by myself, with plans to anchor there and spend the night onboard. Sailing alone entails a higher workload, as well as having no assistance if something goes wrong. However, I knew the boat well, and I had been sailing on my own frequently that summer. In the morning, I checked the weather forecast carefully. Although the breeze was forecast to increase the following day, everything looked well within the limits of my comfort level and ability. The journey to Cohasset was peaceful and beautiful, with light wind and plenty of&amp;nbsp;sunshine.&lt;/p&gt;
&lt;p&gt;That night, I slept somewhat fitfully. Sleeping at anchor is generally nerve-wracking; there’s a constantly lingering worry of being woken by the boat bumping into something because the anchor has come loose. It also takes some adjustment to sleep with the motion of the boat when you’re used to a bed on firmer ground. I woke up to a gentle rain as the sun came up, which gave way to a gorgeously thick bank of fog. I spent the morning reading a book and dozing, waiting for the fog to lift. After eating lunch, it was time to head home. The wind had started to build a little, and a quick check of the forecast told me it was going to continue to strengthen. However, the journey back was only two hours, the wind direction was right, and most of it was in sheltered&amp;nbsp;waters.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;incident&lt;/h2&gt;
&lt;p&gt;About half of the way home, the wind had built significantly. It wasn’t strong enough to make me feel in danger, but the boat was going at its maximum speed and required constant attention. Suddenly, an especially strong gust hit, and I heard a clank near the mast. I saw that a shroud, one of the metal cables that connect the the mast to the deck and hold it upright, had detached and fallen. Thinking back, I remember feeling more surprised than afraid. After all, I thought, the mast was still secured in several other places. However, I was quite close to shore, and I knew I would soon need to turn to avoid an area of shallows. Then, the wind started to change direction, causing me to panic and make the turn. This was a critical mistake. The change of wind angle altered the forces on the mast, and, in what felt like slow motion, the mast snapped in two at its middle and fell&amp;nbsp;overboard.&lt;/p&gt;
&lt;h2&gt;Aftermath and&amp;nbsp;response&lt;/h2&gt;
&lt;p&gt;After recovering, I realized that I needed to take action immediately. I ran to start the gasoline engine, hoping to move to somewhere more sheltered to anchor and buy myself more time to solve the problem. However, if any of the wreckage tangled in the propellor, I would be in deep trouble. Luckily, the engine worked. Fighting the wind and current, the boat moved along at barely one mile per hour. After a painfully long 45 minutes, I finally managed to put the anchor down. A group of good samaritans on another boat saw what had happened and offered their help. Together, we pulled the broken mast and sails out of the water and tied them to the deck. Eventually, I used the engine to travel the last half hour back to my&amp;nbsp;mooring.&lt;/p&gt;
&lt;h2&gt;Ultimate&amp;nbsp;causes&lt;/h2&gt;
&lt;p&gt;There were multiple root causes of this incident. Outside of extreme weather conditions, a shroud detaching from the mast is a very low-probability event. The cables themselves are designed to withstand forces far beyond their normal working load. They are secured at both ends by thick steel pins, which only break when severely corroded. Unfortunately, it is difficult to visually inspect the end that attaches to the mast. Most sailors check them when they can, often during the winter when the boat is on land for storage. The rigging on the boat had been completely redone by a reputable contractor in 2013, and visually appeared to be in perfect shape. As a result, I hadn’t had it inspected since I bought the boat. It is probable that, either due to bad luck or error on the part of the contractor, the steel pin managed to wiggle itself loose. Vibration from the gusty winds probably accelerated the process to completion. The entire incident could most likely have been prevented by having the rigging inspected when I purchased the&amp;nbsp;boat.&lt;/p&gt;
&lt;p&gt;Although the shroud coming loose was a serious failure, it was not by itself enough to bring down the mast. Appropriate and rapid action on my part would have preserved it. If I had quickly dropped the sails, the pressure on the mast would have eased, and I could have used the engine to return home. Although I had a significant amount of sailing experience, much of it was in smaller boats, and relatively little of it was alone. I did not have enough practice dealing with serious equipment failures at sea on my own, or generally in making decisions under time pressure with significant consequences. My initial reaction to the incident was insufficient recognition of its severity, as well as a lack of awareness that I had more time to assess the situation than I thought. A contributing factor was a lack of sleep from the previous night, which impacted my ability to think&amp;nbsp;clearly.&lt;/p&gt;
&lt;h2&gt;Analysis and&amp;nbsp;prevention&lt;/h2&gt;
&lt;p&gt;The first question, and probably the factor I had the most control over: should I have been out there on my own in those conditions? Given that I was alone, should I have waited for the wind to abate? I’ve thought about it many times, and I think that my decision was ultimately the correct one. You don’t learn or improve without pushing yourself towards the edge of your comfort zone, and one reason I purchased the boat was to improve as a sailor. Also, there are always numerous low-probability things that can go wrong. Being cautious and preparing adequately only serves to lower those probabilities, not eliminate them&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;I learned several valuable lessons from this incident. When facing situations where you depend on your equipment, it’s worth spending the time and whatever resources you have to ensure that all of it is in peak condition. A few hundred dollars spent on a rig inspection could have prevented the entire incident in the first place. Also, I’ve heard repeatedly that it’s often the second failure that gets you into trouble, not just the first one in isolation. For example, if I had run out of gasoline, or if my engine had failed, the situation would have gone from just a broken mast to putting the entire boat and my personal safety at risk. The compounding nature of failures increases the importance of maintenance for every critical&amp;nbsp;component.&lt;/p&gt;
&lt;p&gt;I also learned that making good decisions under pressure is a skill that can be improved like any other. This was one of the few times in my life so far where I’ve had to make decisions in seconds with serious consequences. My inexperience in those situations led to a few sub-optimal choices. However, I’m proud of the fact that I successfully executed the correct series of actions under pressure after my initial mistake. I now recognize the importance of practicing making decisions in lower-stakes scenarios to better cope with higher-stakes situations when they&amp;nbsp;occur.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Setting up the Stenomod</title><link href="https://www.danielputtick.com/journal/stenomod-setup.html" rel="alternate"></link><published>2017-05-16T00:19:00-04:00</published><updated>2017-05-16T00:19:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-05-16:/journal/stenomod-setup.html</id><summary type="html">&lt;p&gt;Humans have been using specialized systems of shorthand to record speech in real-time since antiquity. Starting in the late 1800s, automated stenotypes have offered an alternative to written shorthand. Typically, stenography has been reserved for settings where the precise recording of speech was important. One obvious modern example is in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Humans have been using specialized systems of shorthand to record speech in real-time since antiquity. Starting in the late 1800s, automated stenotypes have offered an alternative to written shorthand. Typically, stenography has been reserved for settings where the precise recording of speech was important. One obvious modern example is in the courtroom. Stenography is also important for making spoken word accessible to the deaf, as it allows for real-time captioning. In order to generate an accurate transcript and keep up with human speech, a stenographer must be capable of speeds greater than 200 words per minute. The qwerty keyboard, and indeed, all touch-typing keyboards, are not designed for this speed. For one, the qwerty layout was designed to prevent typewriters from jamming by placing letters that are commonly typed next to each other as far apart as possible. Thus, qwerty maximizes the distance that your fingers have to travel. Even more optimized layouts such as dvorak allow an above average typist to enter around 100 words per minute (the fastest typists exert great effort to go faster than 150). If you’re curious, you can test your own speed at &lt;a href="http://play.typeracer.com/"&gt;http://play.typeracer.com/&lt;/a&gt;. The inherent limitation with touch-typing is that every character must be entered individually. This is in contrast to the way that humans combine phonemes/syllables to form words while&amp;nbsp;speaking.&lt;/p&gt;
&lt;p&gt;A modern stenotype has an entirely different layout from a touch-typing keyboard. It has two sets of consonant sound keys grouped on either side, with four vowel keys in a row below them. When you enter text on a steno keyboard, you combine multiple keys into “chords”. The set of keys you press simultaneously determines the text that is entered. This is much closer to the way that human speech works. The chords are based around phonetics, which makes it easier to learn and keep track of the chords that represent the words you want. This also explains why writing at the pace of human speech is easier than on a touch-typing keyboard – you only have to complete about one “key press” per word. This is especially important for professional stenographers, who need to be able to type at that speed for many hours at a time without a&amp;nbsp;break.&lt;/p&gt;
&lt;p&gt;Historically, stenography equipment and training has come at a steep price. Older closer-source software and hardware systems were patented and access to them was controlled. For a licensed stenographer, a professional grade steno keyboard and software license sells for thousands of dollars new. The companies that sell the closed-source software also run the schools that teach steno, and charge a vast amount of tuition, artificially limiting the supply of stenographers. However, the situation has started to change recently, in part due to the work of the Open Steno Project and their open source steno software called Plover. In response to the success of Plover, &lt;span class="caps"&gt;DIY&lt;/span&gt; and homemade steno keyboards have begun to appear on the market, including the &lt;a href="https://stenomod.blogspot.com/"&gt;Stenomod&lt;/a&gt;, which retails for only $200 (about 1/4 of the price of the cheapest professional-grade steno keyboard). If you’d like, you can also use certain models of touch-typing keyboards for steno with&amp;nbsp;Plover.&lt;/p&gt;
&lt;p&gt;A few of us found out about steno via Mirabai Knight, who provided open captioning for &lt;a href="http://bangbangcon.com/"&gt;!!Con&lt;/a&gt; this year (and in years past). We decided to purchase a Stenomod to experiment with. Our hypothesis was that, assuming the learning curve isn’t too steep, stenography might in fact be a fundamentally better way to input text. Although all of us are programmers, I’m not sure that we’ll actually use the Stenomod for programming. Typically, the bottleneck for throughput with programming is the speed of thought, not the speed of typing. However, programmers and other knowledge workers spend large amounts of time responding to email and writing text associated with their code, including design documents and technical documentation. If steno allows you to write prose at closer to the speed at which you think, it might truly be worth&amp;nbsp;learning.&lt;/p&gt;
&lt;h2&gt;Stenomod Setup&amp;nbsp;Instructions&lt;/h2&gt;
&lt;p&gt;Now, the practical part of this post: our Stenomod arrived the other day and at first we had some trouble setting it up with MacOS. I thought I’d document the process, since we couldn’t find a complete set of instructions that explained our problem. First, a bit of background information. The Stenomod connects to your computer using a microUSB cable, which it uses both for power and to transmit data. When a normal &lt;span class="caps"&gt;USB&lt;/span&gt; keyboard transmits data as you type, it uses a universal protocol that the &lt;span class="caps"&gt;USB&lt;/span&gt; hid (human input device) driver in your kernel (operating system) can understand and decode. The Stenomod sends its data using serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt;. This means that the &lt;span class="caps"&gt;USB&lt;/span&gt; port is actually being used to simulate an old-style serial port, where information is sent as a stream of raw binary data (1s and 0s), and it is the application’s job to decode it. Depending on your &lt;span class="caps"&gt;OS&lt;/span&gt; you’ll probably have to install a device driver to allow your computer to handle serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt;. MacOS comes with a serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt; driver preinstalled starting with 10.9, but it isn’t the correct one for the current version of the Stenomod. You’ll also have to install Plover, whose job it will be to listen to the raw bytes the Stenomod is sending, decode them, and translate them into text that will then appear on your&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;The first step is to download and install the most recent stable version of Plover, which is available at &lt;a href="https://github.com/openstenoproject/plover/releases/latest"&gt;https://github.com/openstenoproject/plover/releases/latest&lt;/a&gt; for MacOS, Windows, and Linux. Next, you’ll ( have to install the correct serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt; driver. Our Stenomod (shipped in May 2017) was built with a “Silicon Labs &lt;span class="caps"&gt;CP2103&lt;/span&gt; &lt;span class="caps"&gt;USB&lt;/span&gt; to &lt;span class="caps"&gt;UART&lt;/span&gt; bridge”. The drivers are available at &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers&lt;/a&gt;. On MacOS, you can double check that your Stenomod still uses the same component by plugging in the MicroUSB cable and opening the System Information app. Viewing the correct entry under Hardware/&lt;span class="caps"&gt;USB&lt;/span&gt; will show you information about the device including the manufacturer and model number. After the driver is installed, open Plover with the Stenomod connected. Click “Configure” and change the “Stenotype Machine:” to “&lt;span class="caps"&gt;TX&lt;/span&gt; Bolt”, which is the name of the serial protocol that the Stenomod uses. Click “Configure…” next to “&lt;span class="caps"&gt;TX&lt;/span&gt; Bolt”. In the “Port” dropdown, you should see the option for something like “/dev/cu.SLAB_USBtoUART” if the driver install was successful. Select that option. The rest of the defaults are correct: “Baudrate: 9600, Data bits: 8, Stop bits: 1, Parity: N, Use Timeout: True/2.0 seconds, &lt;span class="caps"&gt;RTS&lt;/span&gt;/&lt;span class="caps"&gt;CTS&lt;/span&gt;: False, Xon/Xoff: False”. “Ok” and “Save” the two menus, and “Enable” output in Plover. You should be able to start typing on the Stenomod&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;I’ll probably post more about our adventures fooling with the Stenomod in the future. At the moment it seems like an exciting time for stenography. A historical barrier to entry is in the process of being broken down, and we’re still in the early days of open access to steno keyboards and software. If demand continues to grow, more direct to consumer options will appear, and hopefully prices will continue to decline, making steno accessible to greater numbers of people. Currently, there is massive demand for qualified stenographers, particularly for accessibility-related work. There is also great potential for improved software solutions for learning steno quickly. If an experienced touch-typer can grow to match their qwerty typing speed over say, three months, then there is real potential for steno to expand beyond captioning and transcripts. I’m not sure that steno will “replace” touch-typing in any meaningful sense. But, employees in a significant portion of the economy spend their entire day either writing text or in meetings. If steno can provide a large enough increase in input speed for them while facilitating easier and more fluid communication, that could be incentive enough to make the&amp;nbsp;switch.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>CIRCLean</title><link href="https://www.danielputtick.com/journal/circlean.html" rel="alternate"></link><published>2017-03-30T16:10:00-04:00</published><updated>2017-03-30T16:10:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-03-30:/journal/circlean.html</id><summary type="html">&lt;p&gt;For the last few months, I’ve been working full-time on an interesting open source project called &lt;a href="https://github.com/CIRCL/Circlean"&gt;CIRCLean&lt;/a&gt;. CIRCLean solves a niche yet important problem: what you do you do when you are given a &lt;span class="caps"&gt;USB&lt;/span&gt; drive but cannot verify that the key is safe to use? There are various …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the last few months, I’ve been working full-time on an interesting open source project called &lt;a href="https://github.com/CIRCL/Circlean"&gt;CIRCLean&lt;/a&gt;. CIRCLean solves a niche yet important problem: what you do you do when you are given a &lt;span class="caps"&gt;USB&lt;/span&gt; drive but cannot verify that the key is safe to use? There are various exploits in the wild that use compromised &lt;span class="caps"&gt;USB&lt;/span&gt; key firmware as a vector, often referred to collectively as “BadUSB” attacks. These work by, for example, modifying the firmware of the key to make it “pretend” to be a keyboard and perform keystrokes on the target computer&lt;sup id="fnref:fn-badusb"&gt;&lt;a class="footnote-ref" href="#fn:fn-badusb"&gt;1&lt;/a&gt;&lt;/sup&gt;. Alternatively, an otherwise normal key can contain malware and deliver it either by exploiting a kernel vulnerability or even by simple user error. One newsworthy example of an attack delivered via &lt;span class="caps"&gt;USB&lt;/span&gt; key was the Stuxnet&lt;sup id="fnref:fn-stuxnet"&gt;&lt;a class="footnote-ref" href="#fn:fn-stuxnet"&gt;2&lt;/a&gt;&lt;/sup&gt; incident involving the Iranian nuclear&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;Although everybody should at least be aware of &lt;span class="caps"&gt;USB&lt;/span&gt;-based attacks, some individuals have reason to be particularly concerned. Journalists frequently receive source materials via &lt;span class="caps"&gt;USB&lt;/span&gt; key, including those delivered anonymously. For engineers working at sensitive infrastructure sites with air-gapped devices, the consequences of a successful attack are high enough that taking extra precautions with any files on a &lt;span class="caps"&gt;USB&lt;/span&gt; key is worthwhile. In both of these areas there is a high level of Windows &lt;span class="caps"&gt;PC&lt;/span&gt; usage (including older versions of Windows such as &lt;span class="caps"&gt;XP&lt;/span&gt;), which are known to have a especially high number of &lt;span class="caps"&gt;USB&lt;/span&gt;-based&amp;nbsp;vulnerabilities.&lt;/p&gt;
&lt;p&gt;CIRCLean attempts to solve this problem by leveraging a phenomenon that has only recently appeared: the widespread availability of cheap computers capable of running a full Linux distro. CIRCLean uses the Raspberry Pi to read the contents of a &lt;span class="caps"&gt;USB&lt;/span&gt; key without placing the user’s machine directly at risk. The central component of CIRCLean is a modified version of the Raspbian operating system. When a user inserts an untrusted &lt;span class="caps"&gt;USB&lt;/span&gt; key and an empty key and starts up the Pi, they are automatically mounted by a few shell scripts. Some &lt;a href="https://github.com/CIRCL/PyCIRCLean"&gt;Python code&lt;/a&gt; then processes and copies the files from the source key to the blank key. Attacks built into the firmware of the source key will be wasted on the Raspberry Pi and won’t be copied over&lt;sup id="fnref:fn-caveat"&gt;&lt;a class="footnote-ref" href="#fn:fn-caveat"&gt;3&lt;/a&gt;&lt;/sup&gt;. In addition, CIRCLean applies a set of fairly simple heuristics to the files and any that display suspicious characteristics are identified to the user as potentially&amp;nbsp;dangerous.&lt;/p&gt;
&lt;p&gt;The CIRCLean user interface is designed to be relatively easy for a non-technical user to understand and to avoid additional hardware requirements such as a monitor or input devices. Both keys must be inserted before the Raspberry Pi is plugged in. While analyzing and copying the files, music is played through the headphone port. When the process is complete, the Pi automatically shuts down. A log file is generated onto the destination key, containing information about the files present on the source key and any errors or warnings that occurred. Files that have been screened as potentially dangerous have their file path modified on the destination key to clearly indicated that this is the&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;Although it might appear functionally similar, CIRCLean is not a proper antivirus program. Antivirus programs are designed to help the user determine whether or not code can be safely executed. This often involves complicated steps such as running code in a sandbox and checking for signatures that resemble known samples of malware. Fortunately for us, users of CIRCLean are likely to only want certain categories of files, usually consisting of text, images, video, database/email dumps etc. CIRCLean’s heuristics are built around a tool called libmagic, which identifies filetypes based on the presence of specific bytes at specific locations in a file. This, along with a few other third-party open source libraries, helps us find files that contain executable code, or files that are different from what their extension suggests. As long as the user doesn’t run any executable code they are likely to be safe from most garden-variety&amp;nbsp;attacks.&lt;/p&gt;
&lt;p&gt;Why is CIRCLean an important project? First, freedom of the press is crucial for holding governments and institutions accountable to their constituents. Although we are heading towards only sharing files over the network, the proliferation of cheap &lt;span class="caps"&gt;USB&lt;/span&gt; storage means many files are still transferred this way. At the same time, governments are paying increased attention to information security, including using technology to exert control over their citizens. It’s critical for journalists to be able to receive information from sources without fear of placing themselves or their sources at risk. Given the shrinking budgets available for journalism, it’s beneficial for any solution to be open source and freely available. As I mentioned, &lt;span class="caps"&gt;USB&lt;/span&gt; key sanitization is a niche problem, so it’s not necessarily something that paid software was likely to&amp;nbsp;address.&lt;/p&gt;
&lt;p&gt;Of course, CIRCLean isn’t perfect. It is almost certainly vulnerable to an attack intentionally designed to bypass it. Furthermore, the code is freely available for attackers to analyze. But, the typical CIRCLean user is probably mainly trying to avoid generic off-the-shelf exploits. The vast majority of successful attacks rely on un-patched software and/or user error. That said, we’re always looking for ways we can further harden CIRCLean against targeted attacks. If CIRCLean gains more widespread adoption this will become even more of a&amp;nbsp;concern.&lt;/p&gt;
&lt;p&gt;The biggest priorities for CIRCLean going forward are improving verifiability and testability, improving the user interface, and making it easier to potentially leverage Python file handling code in other applications. So far, I’ve improved the documentation, both for potential contributors/technical users and for non-technical end users. I’ve also added a proper unit test suite for the Python code using pytest. Given the sensitive nature of this project, it’s essential that we can guarantee certain behavior when given a specific type of file as an input. Better tests and testing practices are a path to accomplishing this. I’ve also added some smaller features to our modified Raspbian kernel and made a new release incorporating the latest version of Raspbian. I’m currently working on improving the logging &lt;span class="caps"&gt;UI&lt;/span&gt; as well as restructuring the Python &lt;span class="caps"&gt;API&lt;/span&gt; so that it is easier to understand and use. I plan to write some more details about these aspects of the project in an upcoming&amp;nbsp;post.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:fn-badusb"&gt;
&lt;p&gt;&lt;a href="https://www.wired.com/2014/10/code-published-for-unfixable-usb-attack/"&gt;https://www.wired.com/2014/10/code-published-for-unfixable-usb-attack/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-badusb" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn-stuxnet"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Stuxnet"&gt;https://en.wikipedia.org/wiki/Stuxnet&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-stuxnet" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn-caveat"&gt;
&lt;p&gt;That is, unless they are specifically designed to transfer themselves to an uninfected &lt;span class="caps"&gt;USB&lt;/span&gt; key via a flaw in the Linux kernel, pmount, the &lt;span class="caps"&gt;USB&lt;/span&gt; driver, etc.&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-caveat" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="journal"></category></entry><entry><title>Return statement</title><link href="https://www.danielputtick.com/journal/return-statement.html" rel="alternate"></link><published>2017-03-28T11:00:00-04:00</published><updated>2017-03-28T18:51:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-03-28:/journal/return-statement.html</id><summary type="html">&lt;p&gt;From July 5th to September 20th of 2016, I spent a majority of my waking hours at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, and I’ve been postponing writing about it ever since. It’s difficult to organize your thoughts immediately after such a &lt;em&gt;big&lt;/em&gt; thing has ended. In fact, I’m still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From July 5th to September 20th of 2016, I spent a majority of my waking hours at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, and I’ve been postponing writing about it ever since. It’s difficult to organize your thoughts immediately after such a &lt;em&gt;big&lt;/em&gt; thing has ended. In fact, I’m still not exactly sure what I mean by big. Attending &lt;span class="caps"&gt;RC&lt;/span&gt; feels like one of those turning points in life, resembling the societal stereotype of graduating from college or getting married. There’s a tradition of Recursers writing “return statements” (typical silly programming joke) to reflect on and summarize their experiences. When I was considering applying I found reading these both useful and inspiring. Before and during my batch I used them to help think more about what I wanted to work on and learn about. So, here’s my&amp;nbsp;attempt.&lt;/p&gt;
&lt;p&gt;What exactly is the Recurse Center? If you’ve never heard of it, the best place to start is the &lt;a href="https://www.recurse.com/manual"&gt;user’s manual&lt;/a&gt;. When I’m asked to describe &lt;span class="caps"&gt;RC&lt;/span&gt;, a few things come to mind. At its heart is a 6 or 12 week program that’s best described as a “writers retreat” for programmers. Attendees come from a wide range of experience levels and backgrounds. There are no teachers, curriculum, or grades, and you can work on your own toy ideas or existing open source projects. Actually, if you really wanted to you could just spend the whole 3 months talking about programming with everybody. As long as you’re consciously working to improve as a programmer, you’re succeeding. The word “consciously” in that sentence is a key point. At &lt;span class="caps"&gt;RC&lt;/span&gt; there’s a strong culture of thinking more generally about programming and the learning process. Asking and deeply exploring questions such as “what programming topics are worth learning about?” or “what can I do to become better at learning new things” is strongly&amp;nbsp;encouraged.&lt;/p&gt;
&lt;p&gt;The large and growing alumni community is just as important as the retreat itself. As of early 2017, the number of alumni is nearing 1,000. They form a rich network around the world, both online and in person. At this point I’ve learned not to be surprised when I read an interesting blog post and go on to find that its author is affiliated with &lt;span class="caps"&gt;RC&lt;/span&gt;. The community forms an excellent support network and provides opportunities for continuing to learn and grow as a programmer. Living in New York, I’ve also enjoyed spending time with friends I made during and after my batch. One frequently repeated quote that resonates strongly with me is that &lt;span class="caps"&gt;RC&lt;/span&gt; is the world’s best programming community with a three month onboarding&amp;nbsp;period.&lt;/p&gt;
&lt;p&gt;The thing that most surprises people about &lt;span class="caps"&gt;RC&lt;/span&gt; is that it&amp;#8217;s free to attend for everybody. The only expense is whatever it costs you to survive in New York City for three months. The natural question, then, is how can they possibly pay the bills? Once you’re a part of the community, they will help you get a job at companies that they have previously negotiated recruiting agreements with. If you end up taking one of these jobs, the companies pay &lt;span class="caps"&gt;RC&lt;/span&gt; a recruiter’s fee entirely separate from your salary. That said, the jobs staff is also more than happy to aid you in finding a programming job you&amp;#8217;ll love, even if it isn’t at one of these companies. Because of this financial arrangement there is a strong alignment of incentives between &lt;span class="caps"&gt;RC&lt;/span&gt; and the&amp;nbsp;alumni.&lt;/p&gt;
&lt;p&gt;Most people showing up to &lt;span class="caps"&gt;RC&lt;/span&gt; on the first day don’t quite know what to expect. That makes sense – there aren’t too many similar experiences to compare it with. One common emotion is a sudden rush of doubt about whether you deserve to be there. Despite that, the &lt;span class="caps"&gt;RC&lt;/span&gt; staff seem to do a remarkable job at choosing attendees with a very small amount of signal – you probably do belong even if you’re aren’t sure. Later in the afternoon on my first day I remember sitting down, opening my computer, and thinking, “oh, ok, hmmm, what do I do now?” This reflects the beauty of the whole thing – nobody will tell you what you should be doing and no activity is mandatory. One important aspect of &lt;span class="caps"&gt;RC&lt;/span&gt; that helps with acclimation is that people come for 3 month “batches”, and these batches overlap with each other for 6 weeks at a time. The group that has already spent 6 weeks in the space is a great resource for help getting settled. However, it’s important to note that if you can’t afford to spare 3 months there is the opportunity to do a 6 week half-batch&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;There isn’t exactly a “typical day” at &lt;span class="caps"&gt;RC&lt;/span&gt; because of how unstructured everybody’s time is. However, there are some things that are generally consistent. The official working hours are 10:30am-6:30pm. I found this useful because it enforced some sort of routine – just having an expectation of showing up to a specific place at a specific time was enormously useful for my productivity. This is, of course, completely optional. There were people in my batch who arrived at 9am everyday, and others who arrived at 2pm (or later). People at &lt;span class="caps"&gt;RC&lt;/span&gt; often joke that you could have just about the same experience if you just sat at home and programmed for three months. While funny (and perhaps somewhat true), I think this underrates the value of having a dedicated space for programming and a group of peers that share your interests and&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;Most of my time at &lt;span class="caps"&gt;RC&lt;/span&gt; was, unsurprisingly, spent on the computer, either writing code, reading code, or reading about writing code. I also spent a lot of time having interesting conversations with my batch-mates. Recursers will often give seminars or talks on various subjects. There are also recurring weekly events organized by people in the batch. The staff do not take an active role in sustaining these. They are created by attendees and alumni, and the job of making them happen is passed down as people come and go. Over time some traditions do fade, but the lack of structure means they can be resuscitated at any time, and new ones can arise to take their&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;One thing I truly did not anticipate being an important part of these three months wasn’t related to programming at all. Having grown up in Boston and lived in Atlanta before, I thought that my experience with big metropolitan areas meant that New York would be different in scale, but not on any more fundamental level. I was definitely wrong. At the beginning I arrived in New York unsure of whether I’d like living there full-time. In the past when I had visited I was sometimes overwhelmed by the typical things: noise, traffic, crowds. However, the experience was completely different with a permanent place to&amp;nbsp;sleep.&lt;/p&gt;
&lt;p&gt;I stayed in a tiny room in Brooklyn, away from Manhattan and near the calm and green space of Prospect Park, yet just a 25 minute ride on the Q to SoHo. Over the course of three months I learned every detail of the streets around &lt;span class="caps"&gt;RC&lt;/span&gt;. In particular, I grew to love Chinatown. There are so many small shops and delicious cheap food is around every corner. At times it can feel as though you’ve been magically transported to a foreign country. More generally, this is something I love about being in New York. The diversity that is present everywhere is invigorating. Every time you walk on the street you are never short of interesting sights, sounds, and smells, especially if you open your senses and pay attention that what’s around&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;One of my favorite parts of every week at &lt;span class="caps"&gt;RC&lt;/span&gt; was code dojo. Anybody who’s interested shows up and ad hoc pairs are formed. Everyone then works on a small programming problem for about an hour and presents their solutions to the group. I like pair programming because it takes the common conception of writing code as solitary pursuit and turns it on its head. When you can work with others who have more experience than you or who can potentially bring a different perspective to a problem, it’s possible to learn a huge amount in a short period of time. If you have more experience than the other person, the effort of explaining something can help you understand it in an even deeper way. For obvious reasons, pair programming is quite common at &lt;span class="caps"&gt;RC&lt;/span&gt;, and many alumni tend to wish they had done more of it during their batch. I found code dojo to be a great way to make myself spend more time pairing. Through 12 dojos I learned many new Python tricks, wrote a solution in &lt;a href="https://pyth.readthedocs.io/en/latest/getting-started.html"&gt;Pyth&lt;/a&gt;, and picked up some basics of Go and Elixir. Several of my closest friendships at &lt;span class="caps"&gt;RC&lt;/span&gt; began as pair programming&amp;nbsp;sessions.&lt;/p&gt;
&lt;p&gt;Another weekly feature at &lt;span class="caps"&gt;RC&lt;/span&gt; is Thursday presentations. These are an informal opportunity to show your batch-mates what you’ve been working on. There’s no pressure to present, but it’s a great way to get practice talking about technical subjects in front of a friendly and sympathetic audience. In all collaborative pursuits, being able to communicate what you’re working on is often nearly as important as being able to do the work itself. In science there is a strong culture of presenting your work – even as an undergraduate working in a lab I was expected to present every few months in front of the entire group. When trying to improve at technical presentations, there is fundamentally a bootstrapping problem. Without some experience it’s hard to have the confidence or the skills to give a talk to a bigger audience. But, it’s hard to get that experience without a venue to practice presenting. Meetups are one solution to this problem, but giving presentations at &lt;span class="caps"&gt;RC&lt;/span&gt; is a way to accomplish the same goal without having to do your first few talks in front of complete&amp;nbsp;strangers.&lt;/p&gt;
&lt;p&gt;One core part of &lt;span class="caps"&gt;RC&lt;/span&gt; that I haven’t touched on yet are the social rules. Much has been written about them elsewhere, including in the User’s Manual. I will say this: the social rules and the environment they create are critical to the functioning of &lt;span class="caps"&gt;RC&lt;/span&gt;. The combination of no “well actually”s and no feigning surprise creates an environment where you never have to make it appear like you know more about a thing than you do. In fact the effect goes beyond this, to the point that admitting your ignorance is actively encouraged. Doing so opens the possibility for somebody else to teach you something new. Also, it’s likely that you’re not the only person present who would like to learn more, thus the group as a whole benefits. The degree of radical openness at &lt;span class="caps"&gt;RC&lt;/span&gt; expanded my perspective on the spectrum of openness that’s possible in any collaborative situation. This felt especially significant as somebody who has spent time in scientific research where people so often go to great lengths to hide what they don’t know about for fear of being looked down&amp;nbsp;upon.&lt;/p&gt;
&lt;p&gt;A common question I get when I tell people about &lt;span class="caps"&gt;RC&lt;/span&gt; is “what did you work on”, especially from other programmers. This is difficult to answer because my dominant memories are not about specific projects that I finished. Instead, I think of the things I learned both about programming and myself. I also think of the people I spent 12 weeks hanging out and talking about programming with. So much of this learning wasn’t “this is how Python does this thing,” but rather learning how to think about programming, talk about programming, and learn about programming. As a purely self-taught programmer who hadn’t spent much time working with other programmers before, all of these were areas where I had plenty of room to grow. My perspective on what exactly programming is – all the different kinds of things computers can do – was expanded&amp;nbsp;drastically.&lt;/p&gt;
&lt;p&gt;Recently I’ve been thinking often about growth vs. fixed mindsets when it comes to learning. Being at &lt;span class="caps"&gt;RC&lt;/span&gt; convinced me that a focus on having a growth mindset can apply equally well to communities and organizations. It’s readily apparent that the &lt;span class="caps"&gt;RC&lt;/span&gt; staff are constantly seeking for ways to improve. There are of course connections between this and the fact that &lt;span class="caps"&gt;RC&lt;/span&gt; is technically a for-profit startup trying to find its way. But I think in large part it bubbles up from the growth mindsets of the individuals who attend. If you’re constantly thinking about how you can improve as a programmer, it’s natural to start thinking about how the environment you’re working in can itself improve. There are frequently new experiments, some of which are quite drastic, and things are rarely accepted just because “that’s the way we’ve always done it.” Even though they’ve been part of the community for a short period of time, Recursers in the current batch are encouraged to give suggestions for&amp;nbsp;improvements.&lt;/p&gt;
&lt;p&gt;Aside from the formal structure of the social rules, &lt;span class="caps"&gt;RC&lt;/span&gt; convinced me of the value of working with and spending time with nice people. I’m not sure there is that much more to say about this – obviously “nice” is by definition subjective. There have been efforts to somehow formalize this idea in things like the “no asshole rule,” and perhaps the social rules are an approach to the same question. Personally, I found that my productivity went up as a result of not being around jerks, and that probably means I should continue to put myself in similar situations. I think a greater degree of self-awareness also came hand in hand with this. I’d say I’m generally a more sensitive person than I was before I started &lt;span class="caps"&gt;RC&lt;/span&gt;, or at least I do my best to be careful of the effects and unintended consequences that my words and actions can have on&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;I think one skill that many people pick up at &lt;span class="caps"&gt;RC&lt;/span&gt; is an improved ability to work independently. &lt;span class="caps"&gt;RC&lt;/span&gt; is more or less an exercise in unsupervised working and learning, so it makes sense that three months of practice might lead to some improvement. From my point of view, one of the most valuable traits you can develop to be successful at working on anything independently is persistence. In addition, programming itself requires a particular type and quantity of persistence. The experience of programming is mostly having things not work, right up until the moment when they finally do. Programming also seems to follow the Pareto principle in that 20% of the code takes up 80% of the time. Working on something on your own inherently requires persistence – after all, nobody is telling you what to do, and your source of motivation has to come from within. This seems to be something that most programmers are perpetually dealing with, and the excitement to work on your own projects definitely ebbs and&amp;nbsp;flows.&lt;/p&gt;
&lt;p&gt;Every programmer is familiar with the feeling of being stuck. In addition to persistence, it takes a particular set of skills to unstick yourself when you don’t know what to do next. Getting over these hurdles seems to be one of the skills that sets apart more experienced developers. They have a lot of experience being stuck, they’re comfortable with the feelings involved, and they have a set of strategies to get themselves out. I think the second point is particularly important. The feeling of being stuck can be really uncomfortable, and the tendency is to want to just escape that feeling, even if it means shying away from the challenge involved. It can be so tempting to switch to an easier task or go do something else entirely, and the discipline to avoid doing that is critical. Another skill involved in being stuck is knowing how and when to ask for help. &lt;a href="https://jvns.ca/blog/good-questions/"&gt;Julia Evans&lt;/a&gt; and others have written a lot about this, so I can just say here that I learned a lot at &lt;span class="caps"&gt;RC&lt;/span&gt; about getting help from&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;Something I valued while reading other return statements was the personal advice to those who are either about to start a batch at &lt;span class="caps"&gt;RC&lt;/span&gt; or are currently attending. So, what advice do I have for future Recursers? When it comes to Advice on the Internet&amp;trade;, I think it’s important to be aware of the inherent connection between advice and the personal experience of the person giving it. You might ask several people their opinions about how to “do &lt;span class="caps"&gt;RC&lt;/span&gt; well” and get different or conflicting opinions. Ultimately, the first thing to remember is that there is no one right way to approach your batch (oops, I guess that sentence is subject to the same caveat). If you’re spending 3 months at &lt;span class="caps"&gt;RC&lt;/span&gt;, hopefully you showed up strongly motivated to improve as a programmer. There are so many different ways to improve as a programmer and “making computers do things” contains a multitude of possibilities. Here are a few specific pieces of advice, but note that they are &lt;em&gt;not&lt;/em&gt; necessary to make the most of your&amp;nbsp;time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep making forward progress. It’s easy to be stressed about whether you’re working on the right thing, and if you are, that’s good! It means you’re being intentional and thoughtful. At the same time, you can end up biased too far in this direction. A solution is to focus on making progress of some sort every day regardless of what exactly it is. Then, come up for air maybe once or twice a week and decide whether you’re accomplishing your larger goals. If not, the solution is easy: change what you’re working on! At one point during my batch I was feeling kind of stuck, and one of the facilitators suggested that I intentionally start (and not finish) five things in a week to make starting a project feel like less of a big deal. This was a great way to build up some forward momentum. There are no prizes for finishing things – it’s all about learning the most you can. As a sidenote, “finishing things” is itself a skill you can improve at. If that’s something you’d like, well, then just kidding – there are definitely prizes for finishing&amp;nbsp;things!&lt;/li&gt;
&lt;li&gt;If it sounds like a thing you might enjoy doing, consider keeping a daily or weekly list/journal of how you spent your time. It will be easy to forget the smaller things that you worked on and learned. Perhaps somebody will ask you in the future “what did you work on at &lt;span class="caps"&gt;RC&lt;/span&gt;” and you’ll have an easier time answering if you actually wrote it down. At the very least, it will be fun to go back and remember what you did in a few months or years. This is also another good way to help identify if you’re stuck and/or if you’re accomplishing your learning&amp;nbsp;goals.&lt;/li&gt;
&lt;li&gt;You will probably write less code than you planned to and finish fewer projects than you thought you would. That’s ok. This is something many people at &lt;span class="caps"&gt;RC&lt;/span&gt; have trouble with – perhaps everybody just shows up with overly high expectations. It’s easy to think, “this is going to be so great, I’ll be able to work without distraction on whatever I want rather than what somebody is telling me to do. I’m going to be more productive than I’ve ever been in my life.” While it’s true that some people get a lot done at &lt;span class="caps"&gt;RC&lt;/span&gt;, 12 weeks isn’t long, and you’ll inevitably feel yourself being pulled in a dozen different directions at once. During my batch I learned about the basics of network programming, cryptography fundamentals, wrote some C code for the first time, dabbled in some other programming languages, learned about various models of concurrency in Python, and finished part of a web server/web framework (also in Python). Many of the little things I worked on were unrelated and very few of them resulted in a big, tangible piece of finished work. However, when viewed through the lens of accomplishing my learning goals, all of these projects served their&amp;nbsp;purpose.&lt;/li&gt;
&lt;li&gt;If you’re trying to grow as a programmer chances are good you’re working on something new or outside of your comfort zone. As &lt;a href="https://martin.kleppmann.com/2015/10/11/recurse-center-joy-of-learning.html"&gt;Martin Kleppmann&lt;/a&gt; describes, &lt;em&gt;everybody&lt;/em&gt; at &lt;span class="caps"&gt;RC&lt;/span&gt; is a beginner at the thing they are working on. When you’re trying to do something you haven’t done before, making forward progress can be difficult. It’s easy to get discouraged when you imagine some other programmer doing the same project easily. One big realization I had at &lt;span class="caps"&gt;RC&lt;/span&gt; is that when you see an experienced programmer writing code fluently and it looks like it’s flowing out of their fingers fully formed, that means they have probably written something similar before. Maybe a good exercise to drive this point home would be to go back to a project you’ve worked on in the past and write it again from scratch. My guess is you’ll be shocked by how much faster you&amp;nbsp;are.&lt;/li&gt;
&lt;li&gt;Embrace living in New York (if it’s your thing). Don’t come into the space every Friday. Go exploring. Eat all of the food. Maybe even do some touristy things. But, you don’t have to do any of the above if you feel like just focusing on programming, or if the city overwhelms you. There’s so much going on that you’re inevitably going to miss out on something; do whatever you feel is right for you in the&amp;nbsp;moment.&lt;/li&gt;
&lt;li&gt;Get to know your batchmates. Talk with them about programming. Talk with them about whatever they did before &lt;span class="caps"&gt;RC&lt;/span&gt;. As I mentioned before, many of my favorite moments came from talking about programming with people who know more or have more experience than I do. You will also see faces you don’t recognize in the space, especially on alumni Thursdays. You should get to know them as well. Luckily, you have a natural icebreaker: just ask them what they worked on during their batch or what they’ve been working on&amp;nbsp;since.&lt;/li&gt;
&lt;li&gt;At some point the time will come where you realize that you’ll have to go back to the real world soon, and it’s common to have a mid-batch slump as a result. Being at &lt;span class="caps"&gt;RC&lt;/span&gt; is a unique and freeing experience, somewhat magical and set apart from the real world. It can feel like it will be over before you really get to fully experience it. After &lt;span class="caps"&gt;RC&lt;/span&gt; ended, I realized that 12 weeks is actually the perfect length of time. In the months since, I’ve revisited and consolidated so much of the learning I did at &lt;span class="caps"&gt;RC&lt;/span&gt;. Concepts that didn’t stick right away formed new connections and built upon themselves later. Also, a big part of what makes &lt;span class="caps"&gt;RC&lt;/span&gt; great is alumni going out into the world to share the social rules and openness towards learning with those who haven’t had the chance to attend&amp;nbsp;themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Towards the end of my batch, I started to panic because it felt like I hadn’t finished everything I wanted and that I probably wouldn’t be able to. Eventually I came to what was ultimately the most important realization of my three months. The &lt;span class="caps"&gt;RC&lt;/span&gt; motto is “never graduate.” I understand it as having two meanings. The first is that you are always a welcome member of the community even when your batch has ended. The second is that you don’t have to stop doing the things you started doing at &lt;span class="caps"&gt;RC&lt;/span&gt; just because your batch is over. You can keep working on the same projects and applying what you learned in everything you work on, programming-related or&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;And of course, there’s always the option of doing a second&amp;nbsp;batch…&lt;/p&gt;</content><category term="journal"></category></entry></feed>