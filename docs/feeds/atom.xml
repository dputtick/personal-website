<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan Puttick</title><link href="https://www.danielputtick.com/" rel="alternate"></link><link href="https://www.danielputtick.com/feeds/atom.xml" rel="self"></link><id>https://www.danielputtick.com/</id><updated>2020-04-30T00:00:00-04:00</updated><entry><title>Long-term outlook for COVID-19</title><link href="https://www.danielputtick.com/journal/covid-19-long-term.html" rel="alternate"></link><published>2020-04-30T00:00:00-04:00</published><updated>2020-04-30T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-30:/journal/covid-19-long-term.html</id><summary type="html">&lt;p&gt;We&amp;#8217;re now at about five weeks since the start of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 lockdown in New York. I&amp;#8217;ve found myself thinking more about the long-term future. I don&amp;#8217;t have real expertise on any of these topics, and I&amp;#8217;m hesitant to speculate excessively. However, many of us …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We&amp;#8217;re now at about five weeks since the start of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 lockdown in New York. I&amp;#8217;ve found myself thinking more about the long-term future. I don&amp;#8217;t have real expertise on any of these topics, and I&amp;#8217;m hesitant to speculate excessively. However, many of us are finding ourselves needing to make decisions with incomplete information and without the benefit of expert opinions that we can trust. I&amp;#8217;m sure there are many people out there who would have useful advice for me, but it&amp;#8217;s not readily apparent who they are. I wouldn&amp;#8217;t take anything I say below as direct advice: think things through for yourself and draw your own&amp;nbsp;conclusions.&lt;/p&gt;
&lt;p&gt;At some point, stay at home orders will be lifted. But, it seems likely that people will continue to behave differently than they did when &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 wasn&amp;#8217;t a risk. If they have the option to work from home, they&amp;#8217;ll probably continue to do so. Working from home is a skill that can be improved at — people will have had time to improve at it. They will now have comfortable (or at least functional) home offices. They will have routines for buying groceries and cooking. Why risk going into the office? Childcare will continue to be a problem. Those that can afford not to will avoid sending their children to summer camp. The risk of them getting sick or bringing the disease home with them will mostly be viewed as not worthwhile. Together, all of these things will create inertia. They will ensure that things continue largely as they have over the last month. There will certainly be exceptions, like the flood of people trying to get a hair cut. But, there will not be a matching flood of people eating out at restaurants, going on vacation,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;As a result, the various factors that are affecting the economy seem unlikely to change much. To be clear, I&amp;#8217;m not sure &amp;#8220;the economy&amp;#8221; in terms of &lt;span class="caps"&gt;GDP&lt;/span&gt; or public company performance matters much to me directly. But, our current economic system depends heavily on using employment to distribute resources. Drastic increases in unmployment lead to people unable to get healthcare, pay rent, or perhaps even afford food. I don&amp;#8217;t think I&amp;#8217;m able to make specific predictions about the second-order effects of pausing large swathes of the economy. But, on-balance, it seems like decreases in employment, production, and consumption will lead to a reduction in human&amp;nbsp;flourishing.&lt;/p&gt;
&lt;p&gt;Some seem to be anticipating a possible &amp;#8220;quick&amp;#8221; recovery because the underlying fundamentals of the businesses that are struggling haven&amp;#8217;t changed. If you&amp;#8217;re a restaurant that was popular, nothing that influences that popularity will have changed. Your customers still like your food. So, if you &amp;#8220;unpause&amp;#8221; the economy, things will go back to how they were quickly. That doesn&amp;#8217;t make sense to me. If you sell clothing, or air travel, or hotel rooms, or the experience of eating at a restaurant, demand for your product has decreased, and not just because of a stay at home order. People are less likely to buy from you until they&amp;#8217;re no longer scared of getting sick. And, even if you somehow make those fears magically vanish, can you rehire all of the skilled employees you laid off? What about the money you owe your landlord? What if your customers have lost their jobs or are otherwise less economically&amp;nbsp;secure?&lt;/p&gt;
&lt;p&gt;So, what does change after stay at home orders end and the initial surge of cases is contained? It&amp;#8217;s likely that many businesses that can only exist in-person will try to figure out how to stay open while simultaneously protecting their customers. I&amp;#8217;m imagining barber shops only allowing two customers at a time, or restaurants with one-third as many tables. These measures will vary in their effectiveness, and it will be very hard to know which are effective. We&amp;#8217;ll probably enter a period of &amp;#8220;security theater&amp;#8221;, performing some rituals with questionable usefulness just because they&amp;#8217;re expected of&amp;nbsp;us.&lt;/p&gt;
&lt;h2&gt;What questions remain&amp;nbsp;unanswered?&lt;/h2&gt;
&lt;p&gt;Most thinking about the future involves more asking questions than answers. Here are a bunch of things I have lots of uncertainty&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can local/state/federal governments effectively scale up testing, both for active cases and protective antibodies?&lt;/strong&gt; At first, the answer to this seemed to be &amp;#8220;no&amp;#8221;. Recently, it&amp;#8217;s shifting towards &amp;#8220;maybe&amp;#8221;. In the most hard-hit areas, testing capacity has increased dramatically. Given the collective benefits, it doesn&amp;#8217;t seem like there will be issues around financial access to testing. That might change if the situation requires a prolonged period of extensive and ongoing testing. There is also the chance that test reagents availability might limit large-scale&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can governments combine test availability with active tracing?&lt;/strong&gt; In my interpretation, &amp;#8220;active tracing&amp;#8221; means something like: if you test positive, everybody you came into direct contact with over the last n days gets a phone call asking them to come in for a test. This seems more difficult to implement than widespread testing. It involves hiring a large temporary workforce, working across state lines without a comprehensive national &lt;span class="caps"&gt;ID&lt;/span&gt; system, and possibly complex technology-dependent solutions. The difficulties of administering a program like this might be insurmountable for governments in the &lt;span class="caps"&gt;U.S.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Will testing and contact tracing be enough to keep the rate of new cases low and constant, or will we face repeated spikes of new cases?&lt;/strong&gt; This seems difficult to predict without more data. If South Korea (seemingly the most effective deployment of this strategy) continues to successfully sustain a low new case rate, that would be a powerful signal that this strategy can&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can an effective vaccine for coronavirus be made?&lt;/strong&gt; There&amp;#8217;s evidence that an effective vaccine isn&amp;#8217;t a slam dunk. Other coronaviruses mutate quickly and seem to have proven difficult to create vaccines for. One prominent example of this is the common cold. That said, a vaccine would be valuable even if it requires multiple doses, or a yearly booster, or has limited efficacy like the flu&amp;nbsp;vaccine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How long will it take to develop, test, and deploy a vaccine?&lt;/strong&gt; Current estimates suggest the earliest date a vaccine will be ready to be mass-produced and deployed would be early 2021. That&amp;#8217;s if everything goes according to plan. The deployment phase would depend a lot on how the vaccine is produced, but is likely to be on the order of months or even&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How long does immunity to covid-19 last?&lt;/strong&gt; The evidence does suggest that our immune systems produce antibodies specific to &lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-19, and that they are effective, at least for a few months. It&amp;#8217;s possible (maybe likely?) that immunity will decline over time, but still provide some protection. The 1918 flu was deadly due to being caused a new strain of flu virus, but that same strain now circulates in the population without being nearly as&amp;nbsp;deadly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How aggressive is the federal government willing to be about using its powers to support individuals and businesses?&lt;/strong&gt; So far, there has been willingness to take actions that I would classify as politically &amp;#8220;unexpected&amp;#8221;. See: giving out $1200 checks, given the ideology of the party in control of the Senate and the Presidency. The federal government can more or less print as much money as it wants, subject to the risks of doing so. It could pay the rent and unemployment of every person/business affected by coronavirus, if it chooses to. That seems unlikely. So, on a spectrum from &lt;em&gt;that&lt;/em&gt; to nothing, what will it&amp;nbsp;do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the risk tolerance of a typical person? How do they respond to the individual risk they face and the collective risk their community faces once the government is no longer making the risk-tolerance decision for them via a lockdown?&lt;/strong&gt; I&amp;#8217;m not sure how to even begin answering this, other than &amp;#8220;wait and&amp;nbsp;see&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the hidden, second-order risks that aren&amp;#8217;t being considered yet?&lt;/strong&gt; An example: what happens when everybody is working from home and starts using their air conditioning all day during the summer? I&amp;#8217;m guessing cooling a bunch of individual dwellings requires more power than office air conditioning. So, how much extra demand can the power grid&amp;nbsp;support?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How effectively will &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 spread in rural areas?&lt;/strong&gt; So far, the major outbreaks (in the U.S.) have exclusively been in urban and suburban areas. Will the smaller social networks and lack of density in rural areas be sufficiently protective? Or will those areas be just as badly affected, but on a delayed&amp;nbsp;timeline?&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>My COVID-19 experience</title><link href="https://www.danielputtick.com/journal/covid-19-experience.html" rel="alternate"></link><published>2020-04-28T00:00:00-04:00</published><updated>2020-04-28T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-28:/journal/covid-19-experience.html</id><summary type="html">&lt;p&gt;I thought it might be interesting to write some notes on my experience of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19/&lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 pandemic so far. There are no doubt many of these on the internet, but so far I&amp;#8217;ve found each of them interesting to read. It seems worth writing mine down …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought it might be interesting to write some notes on my experience of the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19/&lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 pandemic so far. There are no doubt many of these on the internet, but so far I&amp;#8217;ve found each of them interesting to read. It seems worth writing mine down as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;In January I first starting learning about the emerging disease in China, but didn&amp;#8217;t immediately pay it close attention. On February 8th, I was killing time reading the news while waiting for a friend. Somehow, a specific series of news stories about the situation led me to think through possible outcomes in a way I hadn&amp;#8217;t previously. I can remember making a few logical leaps in a row. First, it seemed unlikely that containment efforts had been completely effective. Wuhan has more than 10 million residents: preventing the travel of every single contagious individual sounds like an impossible task. Second, the apparent rapid spread of the disease combined with the likely inability of other governments to impose containment as vigorously as China would lead to inevitable spread in other countries. Third, the interconnectedness of the global economy meant that a meaningful economic impact would occur everywhere regardless of how widely the virus&amp;nbsp;spread.&lt;/p&gt;
&lt;p&gt;This felt like seeing something that could not be unseen. Over the course of the next few days, I felt plenty of anxiety and sadness. I also took a few immediate actions. I adjusted my savings to be more resilient to a financial downturn. This basically meant selling shares of a Vanguard S&amp;amp;P500 &lt;span class="caps"&gt;ETF&lt;/span&gt; and buying a short-term government bond fund. I also changed my plans around looking for my full-time work. Rather than waiting to look for a job for few more months, I started my search immediately. Hindsight bias makes statements like these barely worth the &amp;#8220;paper&amp;#8221; they&amp;#8217;re written on, but I&amp;#8217;d say I was considering at least a 20% chance of a recession comparable in magnitude to 2008-2009, and maybe a 50% chance of a noticeable but more mild economic downtown of some sort. At the time, when I brought up my point of view with a few friends, most of them more or less agreed with my logic, but also thought I was being overly concerned. That week, I also went and purchased a 32oz bottle of hand sanitizer. There were dozens of them on the&amp;nbsp;shelf.&lt;/p&gt;
&lt;p&gt;On the first weekend of March, I flew to Miami for a short trip with a few friends. The following week, one of them came down with a fever and dry cough. That, despite not having any exposure to known cases or international travel. After a week&amp;#8217;s delay, he managed to get tested for &lt;span class="caps"&gt;COVID&lt;/span&gt;-19. Around then, I noticed I was feeling unusual shortness of breath going up stairs, a mild cough, and some chest tightness. When his test came back positive after five days, it seemed extremely likely that I had the virus as well. Luckily, my symptoms were extremely mild. I had about two weeks of similar fatigue, but no fever. I&amp;#8217;m still not even positive I had the disease, because getting tested in New York was virtually impossible at the time without going to the&amp;nbsp;hospital.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m writing this on April 28th. Luckily, I&amp;#8217;ve managed to land a job offer, despite hearing of many companies conducting layoffs and having several companies I was in contact with pause their hiring processes. Overall, job searching felt like the part of musical chairs after the music turns off. It seems many of us have started to settle into our quarantine routines. After the short-term anxiety and new developments every day comes the long-term anxiety of waiting to see when things will start going back to normal, and wondering what &amp;#8220;normal&amp;#8221; will look&amp;nbsp;like.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Site update</title><link href="https://www.danielputtick.com/journal/site-update.html" rel="alternate"></link><published>2020-04-20T00:00:00-04:00</published><updated>2020-04-20T00:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2020-04-20:/journal/site-update.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve taken advantage of some free time to make some design and functionality changes to this site. The most notable of these is that I&amp;#8217;ve split written content into two categories: &amp;#8220;writing&amp;#8221; and &amp;#8220;journal&amp;#8221;. I&amp;#8217;d like to make it easier for myself to write more frequently and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve taken advantage of some free time to make some design and functionality changes to this site. The most notable of these is that I&amp;#8217;ve split written content into two categories: &amp;#8220;writing&amp;#8221; and &amp;#8220;journal&amp;#8221;. I&amp;#8217;d like to make it easier for myself to write more frequently and in smaller, less thoroughly-edited chunks. I think the barrier there is largely psychological, and I&amp;#8217;m hoping this well help. The &amp;#8220;journal&amp;#8221; will be things I&amp;#8217;ve written in one sitting, with perhaps a single pass of editing. I won&amp;#8217;t try to guarantee that they&amp;#8217;re accurate, well-written, well-thought-out, unique, etc. Many of them might end up being titled with just a date. The &amp;#8220;writing&amp;#8221; section will be longer pieces that I&amp;#8217;ve invested some amount of effort into. I&amp;#8217;ll intend to make them evergreen, and update them if I have changes to my thinking. It&amp;#8217;s possible that some pieces will start out as journal entries before morphing into full-on writing: that&amp;#8217;s another goal of this&amp;nbsp;experiment.&lt;/p&gt;
&lt;p&gt;Along with the main Atom feed, the two categories have their own Atom feeds, to make it easy to follow them separately. I&amp;#8217;ve sorted my existing writing into the two categories based on how well I feel they&amp;#8217;ve held&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In terms of design tweaks, I threw out the Pelican theme I had chosen and lightly modified to my liking and wrote my own html/css from scratch. I found it was noticeably different to think about the &amp;#8220;right&amp;#8221; way to do things rather than just tweaking values until it looked the way I hoped. I also had to learn some details of a few css techniques I had only heard about previously, such as flexbox. The performance still isn&amp;#8217;t as snappy as I&amp;#8217;d want it. After some brief profiling it seems likely there are some gains to be had from optimizing and minifying the css I wrote. But, I think it will do for&amp;nbsp;now.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Writing a postmortem: an interview exercise I really like</title><link href="https://www.danielputtick.com/journal/mapbox-postmortem-interview.html" rel="alternate"></link><published>2017-10-31T15:30:00-04:00</published><updated>2017-10-31T15:30:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-10-31:/journal/mapbox-postmortem-interview.html</id><summary type="html">&lt;p&gt;First, some exciting news that&amp;#8217;s relevant as context: starting in November, I&amp;#8217;ll be joining &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; in their Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; office. One thing that made me excited about joining Mapbox was how much I enjoyed their &lt;a href="https://blog.mapbox.com/how-we-hire-at-mapbox-cd946418299f"&gt;interview process&lt;/a&gt;. No part of it felt like it required extra &amp;#8220;preparation&amp;#8221; and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, some exciting news that&amp;#8217;s relevant as context: starting in November, I&amp;#8217;ll be joining &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; in their Washington, &lt;span class="caps"&gt;DC&lt;/span&gt; office. One thing that made me excited about joining Mapbox was how much I enjoyed their &lt;a href="https://blog.mapbox.com/how-we-hire-at-mapbox-cd946418299f"&gt;interview process&lt;/a&gt;. No part of it felt like it required extra &amp;#8220;preparation&amp;#8221; and it was clear that some significant thought had been put into its design. In my opinion, this is a pretty useful signal about an engineering organization. If we accept that finding great engineers (by whatever definition of &amp;#8220;great&amp;#8221; you subscribe to) is one of the largest contributors to the success of any company, it&amp;#8217;s possible that a company with an interview process that appears disorganized or nonsensical is otherwise well-functioning, but it&amp;#8217;s probably at least somewhat less&amp;nbsp;likely.&lt;/p&gt;
&lt;p&gt;One aspect of the Mapbox interview process that I particularly liked was their request that I write a blameless postmortem as a take-home exercise. If the term is unfamiliar, postmortems are a tool designed to help facilitate a culture of building institutional knowledge and learning from the past. Whenever something goes wrong – an outage, bug in production, failure to meet an &lt;span class="caps"&gt;SLA&lt;/span&gt;, etc – anybody involved in the situation can call for a postmortem. The postmortem takes the form of a shared document where everybody can contribute their account of the incident to help identify its ultimate causes and propose changes to prevent it from happening again. The &amp;#8220;blameless&amp;#8221; aspect is crucial: a good postmortem avoids conclusions like &amp;#8220;Dan wrote a bug and it brought down our service&amp;#8221; and instead says &amp;#8220;Dan wrote a bug and it brought down the service: we need to improve our testing and deployment processes to make sure that they catch this category of bugs in the future.&amp;#8221; For many mistakes that initially look like they ought to be blamed on an individual, it&amp;#8217;s possible to identify a deficiency in a process as the root cause. You can read more about blameless postmortems in the &lt;a href="https://landing.google.com/sre/book/chapters/postmortem-culture.html"&gt;Google &lt;span class="caps"&gt;SRE&lt;/span&gt; book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I thought this exercise was a great interview question because it lets the reader learn more about several different attributes that one might associate with good&amp;nbsp;programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s a sample of the type of written communication you&amp;#8217;ll be doing frequently in a work environment. Between documentation, taking notes while working, design documents, commit messages, chat, and email, programmers can produce significantly more prose than  code. Being able to express technical concepts clearly, unambiguously, and succinctly is essential. I may be wrong, but I sometimes get the feeling that this is widely acknowledged, but without the accompanying recognition that writing is a skill that can be improved relatively easily. Producing excellent writing might take a lot of work, but learning to write &lt;em&gt;decently&lt;/em&gt; isn&amp;#8217;t that different from improving as a programmer: it takes building up experience, practicing deliberately, taking the time to revise repeatedly, and getting constructive&amp;nbsp;feedback.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s a great way for the writer to demonstrate their ability to assume the perspective of others. So much of being a good engineer is having empathy for your users and the other programmers who will read, modify, or interact with your code. Writing a useful postmortem necessarily requires empathy, because you have to put yourself in the shoes of everybody involved in the incident and understand what they were thinking and why they took the actions they&amp;nbsp;did.&lt;/li&gt;
&lt;li&gt;It helps assess the writer&amp;#8217;s ability to think critically and logically about a complex chain of events. Imagining all possible contributing factors to an incident and identifying the various links of causality is the same type of thinking as is required when trying to think of edge cases or identify the tradeoffs and compromises in a system&amp;#8217;s design. Finding ultimate rather than proximate causes, dismissing alternate explanations, and considering counterfactuals are all closely related to the type of critical thinking involved in debugging software or troubleshooting&amp;nbsp;systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I sat down to write my postmortem, I wasn&amp;#8217;t sure whether to analyze a programming-related incident or choose something else. The instructions said the postmortem could be about anything I liked, and I decided it might be fun to write about a certain eventful and unusual accident that happened to me a few years ago. What I wrote is definitely not perfect, it&amp;#8217;s just one example, and there&amp;#8217;s no one &amp;#8220;right&amp;#8221; way to format or organize a postmortem. Anyway, I&amp;#8217;m excited about the new job, and feel free to reach out if you&amp;#8217;re curious about the Mapbox hiring process or what it&amp;#8217;s like to work there (you should probably give me some time after I&amp;#8217;ve started for the latter). Here&amp;#8217;s what I sent the hiring team, unedited, in&amp;nbsp;full:&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I chose this incident by thinking, “what’s the most memorable unfortunate thing that I’ve been involved in over the past few years?” For context, in 2014 I had purchased an old, smallish (28 foot) sailboat. At the time I had some extra savings, and decided that it would be a enjoyable way to pass the summertime in Boston. I stored the boat on a mooring near Boston Harbor and sailed it frequently in 2014 and&amp;nbsp;2015.&lt;/p&gt;
&lt;p&gt;One weekend in October 2015, I decided to sail to nearby Cohasset Harbor by myself, with plans to anchor there and spend the night onboard. Sailing alone entails a higher workload, as well as having no assistance if something goes wrong. However, I knew the boat well, and I had been sailing on my own frequently that summer. In the morning, I checked the weather forecast carefully. Although the breeze was forecast to increase the following day, everything looked well within the limits of my comfort level and ability. The journey to Cohasset was peaceful and beautiful, with light wind and plenty of&amp;nbsp;sunshine.&lt;/p&gt;
&lt;p&gt;That night, I slept somewhat fitfully. Sleeping at anchor is generally nerve-wracking; there’s a constantly lingering worry of being woken by the boat bumping into something because the anchor has come loose. It also takes some adjustment to sleep with the motion of the boat when you’re used to a bed on firmer ground. I woke up to a gentle rain as the sun came up, which gave way to a gorgeously thick bank of fog. I spent the morning reading a book and dozing, waiting for the fog to lift. After eating lunch, it was time to head home. The wind had started to build a little, and a quick check of the forecast told me it was going to continue to strengthen. However, the journey back was only two hours, the wind direction was right, and most of it was in sheltered&amp;nbsp;waters.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;incident&lt;/h2&gt;
&lt;p&gt;About half of the way home, the wind had built significantly. It wasn’t strong enough to make me feel in danger, but the boat was going at its maximum speed and required constant attention. Suddenly, an especially strong gust hit, and I heard a clank near the mast. I saw that a shroud, one of the metal cables that connect the the mast to the deck and hold it upright, had detached and fallen. Thinking back, I remember feeling more surprised than afraid. After all, I thought, the mast was still secured in several other places. However, I was quite close to shore, and I knew I would soon need to turn to avoid an area of shallows. Then, the wind started to change direction, causing me to panic and make the turn. This was a critical mistake. The change of wind angle altered the forces on the mast, and, in what felt like slow motion, the mast snapped in two at its middle and fell&amp;nbsp;overboard.&lt;/p&gt;
&lt;h2&gt;Aftermath and&amp;nbsp;response&lt;/h2&gt;
&lt;p&gt;After recovering, I realized that I needed to take action immediately. I ran to start the gasoline engine, hoping to move to somewhere more sheltered to anchor and buy myself more time to solve the problem. However, if any of the wreckage tangled in the propellor, I would be in deep trouble. Luckily, the engine worked. Fighting the wind and current, the boat moved along at barely one mile per hour. After a painfully long 45 minutes, I finally managed to put the anchor down. A group of good samaritans on another boat saw what had happened and offered their help. Together, we pulled the broken mast and sails out of the water and tied them to the deck. Eventually, I used the engine to travel the last half hour back to my&amp;nbsp;mooring.&lt;/p&gt;
&lt;h2&gt;Ultimate&amp;nbsp;causes&lt;/h2&gt;
&lt;p&gt;There were multiple root causes of this incident. Outside of extreme weather conditions, a shroud detaching from the mast is a very low-probability event. The cables themselves are designed to withstand forces far beyond their normal working load. They are secured at both ends by thick steel pins, which only break when severely corroded. Unfortunately, it is difficult to visually inspect the end that attaches to the mast. Most sailors check them when they can, often during the winter when the boat is on land for storage. The rigging on the boat had been completely redone by a reputable contractor in 2013, and visually appeared to be in perfect shape. As a result, I hadn’t had it inspected since I bought the boat. It is probable that, either due to bad luck or error on the part of the contractor, the steel pin managed to wiggle itself loose. Vibration from the gusty winds probably accelerated the process to completion. The entire incident could most likely have been prevented by having the rigging inspected when I purchased the&amp;nbsp;boat.&lt;/p&gt;
&lt;p&gt;Although the shroud coming loose was a serious failure, it was not by itself enough to bring down the mast. Appropriate and rapid action on my part would have preserved it. If I had quickly dropped the sails, the pressure on the mast would have eased, and I could have used the engine to return home. Although I had a significant amount of sailing experience, much of it was in smaller boats, and relatively little of it was alone. I did not have enough practice dealing with serious equipment failures at sea on my own, or generally in making decisions under time pressure with significant consequences. My initial reaction to the incident was insufficient recognition of its severity, as well as a lack of awareness that I had more time to assess the situation than I thought. A contributing factor was a lack of sleep from the previous night, which impacted my ability to think&amp;nbsp;clearly.&lt;/p&gt;
&lt;h2&gt;Analysis and&amp;nbsp;prevention&lt;/h2&gt;
&lt;p&gt;The first question, and probably the factor I had the most control over: should I have been out there on my own in those conditions? Given that I was alone, should I have waited for the wind to abate? I’ve thought about it many times, and I think that my decision was ultimately the correct one. You don’t learn or improve without pushing yourself towards the edge of your comfort zone, and one reason I purchased the boat was to improve as a sailor. Also, there are always numerous low-probability things that can go wrong. Being cautious and preparing adequately only serves to lower those probabilities, not eliminate them&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;I learned several valuable lessons from this incident. When facing situations where you depend on your equipment, it’s worth spending the time and whatever resources you have to ensure that all of it is in peak condition. A few hundred dollars spent on a rig inspection could have prevented the entire incident in the first place. Also, I’ve heard repeatedly that it’s often the second failure that gets you into trouble, not just the first one in isolation. For example, if I had run out of gasoline, or if my engine had failed, the situation would have gone from just a broken mast to putting the entire boat and my personal safety at risk. The compounding nature of failures increases the importance of maintenance for every critical&amp;nbsp;component.&lt;/p&gt;
&lt;p&gt;I also learned that making good decisions under pressure is a skill that can be improved like any other. This was one of the few times in my life so far where I’ve had to make decisions in seconds with serious consequences. My inexperience in those situations led to a few sub-optimal choices. However, I’m proud of the fact that I successfully executed the correct series of actions under pressure after my initial mistake. I now recognize the importance of practicing making decisions in lower-stakes scenarios to better cope with higher-stakes situations when they&amp;nbsp;occur.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>Understanding subnet masks</title><link href="https://www.danielputtick.com/writing/subnet-masks.html" rel="alternate"></link><published>2017-07-17T18:00:00-04:00</published><updated>2017-07-17T19:22:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-07-17:/writing/subnet-masks.html</id><summary type="html">&lt;p&gt;I have a fairly broad understanding of networking and how the Internet works. However, for some reason, I had previously never fully understood exactly what a subnet mask is. Why are &lt;span class="caps"&gt;IP&lt;/span&gt; addresses sometimes written with a slash and another number (10.0.0.1/24) at the end of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a fairly broad understanding of networking and how the Internet works. However, for some reason, I had previously never fully understood exactly what a subnet mask is. Why are &lt;span class="caps"&gt;IP&lt;/span&gt; addresses sometimes written with a slash and another number (10.0.0.1/24) at the end of them? Why do you see something like ”subnet mask: 255.255.255.0” in your network configuration settings? I knew that both had something to do with subnet masks, but not much beyond that. To learn more, I decided to jot down some notes on the subject. This post assumes some basic understanding of &lt;span class="caps"&gt;IP&lt;/span&gt; addressing and the Internet, although I’ll try to fill in as much detail as I can. It turns out that, to properly understand subnet masks and the context for their existence, you need to learn a surprising amount about the architecture and evolution of the&amp;nbsp;Internet.&lt;/p&gt;
&lt;div class="section" id="the-ip-addressing-system"&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;IP&lt;/span&gt; addressing&amp;nbsp;system&lt;/h2&gt;
&lt;p&gt;First, the &lt;span class="caps"&gt;IP&lt;/span&gt; (internet protocol) addressing system. &lt;span class="caps"&gt;IP&lt;/span&gt; addresses are a solution to a core design problem that arises when sending messages across any type of network: how do you efficiently ensure that every message arrives at the correct destination? To solve this problem in the real world, many countries use a system of physical street addresses. Everybody puts their street number above their door, and the government assigns and keeps track of street names (fortunately, those don’t change often). The organizational structure of the Post Office then ensures that every letter makes it to the right mailbox. Within that structure, each individual Post Office location independently applies a set of rules for sorting and passing on letters and packages. By independently, I mean that they don’t consult some central authority for instructions each time a letter is dropped off. Although there are similarities, the &lt;span class="caps"&gt;IP&lt;/span&gt; system looks a little different than the post office, largely because solving the addressing problem on the Internet is more difficult. The number of clients is an order of magnitude larger, intermediate routers are controlled by many different entities, computers connect and disconnect to the Internet much more frequently than people change their street addresses, and the volume of messages and speed of handling them is significantly&amp;nbsp;greater.&lt;/p&gt;
&lt;p&gt;IPv4, the first “production” version of &lt;span class="caps"&gt;IP&lt;/span&gt; addressing, was initially described together with &lt;span class="caps"&gt;TCP&lt;/span&gt; in a &lt;a class="reference external" href="https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf"&gt;1974 paper&lt;/a&gt; and deployed on the Internet predecessor &lt;span class="caps"&gt;ARPANET&lt;/span&gt; in 1983. Each IPv4 address is a series of 4 bytes (thus 32 bits). This means that, despite any appearances to the contrary, an &lt;span class="caps"&gt;IP&lt;/span&gt; address is just an integer with a value between 0 and 2&lt;sup&gt;32&lt;/sup&gt; – the typical “dotted quad” notation’s purpose is to make an address easily human readable. But, assigning a unique identifier to every device on the Internet isn’t sufficient to solve the message routing problem! The network needs some sort of overall structure or “topology”, otherwise designing a system of &lt;em&gt;efficiently&lt;/em&gt; routing messages becomes quite difficult. Going back to our mail analogy, imagine if the Post Office had to deliver mail by looking up every address in a giant atlas or table, rather than relying on the fact that each &lt;span class="caps"&gt;ZIP&lt;/span&gt; code consists of a contiguous area. Maintaining that atlas would be an enormous amount of work, and looking up each address would take a long time. And of course, with the Internet, computers join and leave the network very frequently, so the “atlas” would be constantly out of&amp;nbsp;date.&lt;/p&gt;
&lt;p&gt;To create this organization, &lt;span class="caps"&gt;IP&lt;/span&gt; addresses needed to be assigned to users in an systematic way that reflected the network architecture, rather than at random. Initially, continuous ranges of &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, referred to as “blocks”, were assigned to participating institutions such as Universities. The institution associated with a given &lt;span class="caps"&gt;IP&lt;/span&gt; was identified by the first byte, known as the “network byte”. For example, &lt;span class="caps"&gt;MIT&lt;/span&gt; was given the block of addresses starting with decimal 18 (18.0.0.0 through 18.255.255.255). This arrangement made the logic for routing messages straightforward. Every packet with a destination address starting with “18” could be relayed in the direction of &lt;span class="caps"&gt;MIT&lt;/span&gt;’s network. &lt;span class="caps"&gt;MIT&lt;/span&gt; would assign each machine on their internal network its own unique address using the last three bytes, known as the “host bytes”, and route the packets accordingly. Unfortunately, this system only allowed for 255 blocks of addresses, which was soon revealed to be insufficient. Since many institutions didn’t need a whole block (~16.8 million) of addresses, the system by which addresses were assigned was amended to allow three different sizes of blocks. Class A blocks were like the one given to &lt;span class="caps"&gt;MIT&lt;/span&gt; (1 network byte, 3 host bytes), Class B blocks had 2 network bytes and 2 host bytes, and Class C blocks had 3 network bytes and 1 host byte. Suddenly, there were enough blocks of addresses to accomodate many more&amp;nbsp;institutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="classless-interdomain-routing"&gt;
&lt;h2&gt;Classless Interdomain&amp;nbsp;Routing&lt;/h2&gt;
&lt;p&gt;This arrangement worked for most of the 1980s, but problems began to emerge. One such issue: in order to know where to send packets, routers maintain what are known as routing tables. These tables are updated dynamically by routers communicating with each other using specialized protocols separate from &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;. Routing tables specify information like “if you see a packet destined for an address starting with “18”, send it to this address next.” Presumably, this address, often referred to as the next “hop”, is part of the shortest path to the &lt;span class="caps"&gt;MIT&lt;/span&gt; network. With the introduction of classful block assignment, the number of sub-networks connected to the Internet grew rapidly, and the size of routing tables grew proportionally as a result. The storage requirements for these tables threatened to overwhelm the capacity of router hardware at the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;A solution to this problem, known as &lt;span class="caps"&gt;CIDR&lt;/span&gt; (Classless Interdomain Routing), was released in 1993. It’s important to mention again that there is no inherent difference between the network and host portion of an &lt;span class="caps"&gt;IP&lt;/span&gt; address – as I mentioned, an &lt;span class="caps"&gt;IP&lt;/span&gt; address is just a group of 32 bits. The dividing line between the network and host sections is always “in the eye of the beholder”. With classful routing, this dividing line was always located in the same place, depending solely on the class of the destination network. As a result, every router on the internet had the same key for that network in their routing table. In contrast, &lt;span class="caps"&gt;CIDR&lt;/span&gt; allows routers to maintain a flexible distinction between the host and network bytes. How does that work? Let’s say a router receives a packet destined for address 123.123.123.123, which happens to be somewhere “far away” (requiring many hops) on the network. The routing table can treat, say, the first 4 bits as the network section, and store the same next hop for all addresses starting with those four bits. Of course, this rests on the assumption that all &lt;span class="caps"&gt;IP&lt;/span&gt; addresses starting with those bits are roughly grouped together on the network. This arrangement saves a lot of space in the routing table by combining “redundant” entries. By redundant entries, I mean that, if packets going to 123.121.111.111 and 123.123.123.123 are heading in the same general direction, the router doesn’t need to keep a separate line in the routing table for each of them. Under the old classful system (assuming they were both class B networks), two entries would have been required – one for addresses starting with 123.121 and one for 123.123. As a packet is passed on from hop to hop and gets closer to its destination, routers can treat the network section of the address as being larger in their routing&amp;nbsp;tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="subnet-masks-finally"&gt;
&lt;h2&gt;Subnet masks&amp;nbsp;(finally)&lt;/h2&gt;
&lt;p&gt;So, what do subnet masks have to do with all of this? Subnet masks are an implementation detail of the architecture I’ve described above. First, what is a bitmask in the general sense? Bitmasks are a way of allowing a computer to efficiently check whether a portion of one set of bytes matches another set of bytes. Let’s say we have the single byte 1101 1001, and we want to check whether the first four bits are actually 1101. First, we apply the mask 1111 0000 by bitwise ANDing the byte with the mask. We get 1101 0000 as the result. Now, we do a bitwise comparison with the byte 1101 0000, and we’ve verified the first four bits. When using a netmask, the set of input bytes is an &lt;span class="caps"&gt;IP&lt;/span&gt; address. Let’s say we’re a router in the early days of the internet, we’ve received a packet for &lt;span class="caps"&gt;IP&lt;/span&gt; 18.165.1.1, and we want to use our routing table to know where it should go next. We know that we only care about the first byte, so we can apply the mask 11111111 00000000 00000000 00000000 (255.0.0.0) to get 18.0.0.0. Now, looking that up in our routing table, we see the entry matching 18.0.0.0, and we know the next hop for the packet. So, a netmask is just a way of checking that a section of an &lt;span class="caps"&gt;IP&lt;/span&gt; address matches some other &lt;span class="caps"&gt;IP&lt;/span&gt; address that happens to be very efficient for CPUs. A subnet mask is a use of a netmask to check whether a packet is bound for a particular subsection of the network. Of course, I could have just told you that at the beginning, but you wouldn’t have appreciated its significance without a little understanding of why we need to do that sort of checking in&amp;nbsp;practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assorted-other-details"&gt;
&lt;h2&gt;Assorted other&amp;nbsp;details&lt;/h2&gt;
&lt;p&gt;What about the alternative notation I mentioned earlier, using /24? This notation is known as &lt;span class="caps"&gt;CIDR&lt;/span&gt; notation. Remember, with &lt;span class="caps"&gt;CIDR&lt;/span&gt;, we can have the network portion of an &lt;span class="caps"&gt;IP&lt;/span&gt; address be any number of bits. Writing out a netmask for some arbitrary number of bits is a little bit awkward in decimal dotted-quad notation. It’s much easier to just specify the length of the mask, aka the number of bits that are part of the network section. So, if we only want to match on the first four bits, we’d use “/4”. When a computer pairs an &lt;span class="caps"&gt;IP&lt;/span&gt; address and a subnet mask together, like 123.123.123.100/24, it’s saying, “from my perspective, this address has 24 bits (123.123.123) corresponding to the subnetwork it is destined for, and 8 bits (“100”) corresponding to the host it is destined for on that subnet. This is exactly the same as specifying a subnet mask of 255.255.255.0 – three bytes of 11111111 and one byte of&amp;nbsp;00000000.&lt;/p&gt;
&lt;p&gt;So far, in this post I’ve only discussed IPv4. It’s important to note that there is a whole other implementation of &lt;span class="caps"&gt;IP&lt;/span&gt;, known as version 6 (IPv6).  Aside from the other challenges I’ve mentioned, there simply aren’t enough IPv4 addresses to go around. Having ~4.3 billion possible addresses seemed like in inexhaustable supply in the early days of the Internet, but that proved to be another false assumption. The most obvious solution to this problem is to increase the number of addresses – IPv6, released in 1993, changes the address format to be 128 bits (16 bytes), which allows for an address space of 2&lt;sup&gt;128&lt;/sup&gt;, more than enough addresses (~3.4 x 10&lt;sup&gt;38&lt;/sup&gt; of them) for the foreseeable future. Unfortunately, updating a protocol without having backwards compatibility is quite a challenge. Plenty of devices connected to the Internet have legacy software that is difficult to patch with IPv6 compatability, making switching completely to IPv6 almost impossible at present. If you tried to only use IPv6, you would not be guaranteed interoperability with the entire Internet. Thus, IPv4 will probably remain the dominant addressing system in the nearer&amp;nbsp;term.&lt;/p&gt;
&lt;p&gt;The main solution to IPv4 address exhaustion has involved creating smaller private subnetworks behind a public router. This is most likely the way that you connect to the Internet at home. If you assign one single public IPv4 address to your router, and have the router create an internal network blocked off from the outside world, you can connect many more devices using the same global 32 bit address space. In this system, the main Internet is referred to as the &lt;span class="caps"&gt;WAN&lt;/span&gt;, or wide area network, and the sub network is known as the &lt;span class="caps"&gt;LAN&lt;/span&gt;, or local area network. Configuring these local networks involves another use of subnet masks. Most home routers have an internal network with an address range that’s something like 192.168.0.0 to 192.168.0.255. Because these addresses aren’t connected to the wider Internet, every router can use this same range without risk of confusion. It’s the router’s job to handle the distribution of incoming packets to the correct device. In the case I describe, the router is using a subnet mask of 255.255.255.0: everything matching 192.168.0 over the first three bytes is destined for some computer on the local network. If you have too many people over for dinner (or working for your company), you might run out of addresses in this range. One thing you could do is change the subnet mask to 255.255.0.0, giving you many more addresses to work&amp;nbsp;with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-summarize"&gt;
&lt;h2&gt;To&amp;nbsp;summarize&lt;/h2&gt;
&lt;p&gt;In conclusion, here are the key takeaways from my original question. First, a bitmask is a way for a computer to efficiently check whether part of a chunk of bytes matches some pattern. Second, a netmask is a bitmask designed to check whether part of a network address matches a specific pattern. Third, subnet masks are a category of netmasks, used to match whether a message is destined for a particular subsection of a network. In practice, the difference between a netmask is almost always nonexistent, as netmasks are usually used as subnet masks. And finally, one (of many) applications of subnet masks is related to the routing of packets on the Internet, a system which has an interesting history behind&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Thanks to Or Mattatia and Ahmad Jarara for their comments and&amp;nbsp;suggestions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="writing"></category></entry><entry><title>Asyncio concepts for beginners</title><link href="https://www.danielputtick.com/writing/asyncio-basics.html" rel="alternate"></link><published>2017-06-26T15:00:00-04:00</published><updated>2017-06-26T15:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-06-26:/writing/asyncio-basics.html</id><summary type="html">&lt;p&gt;Asyncio is a relatively new standard-library solution for writing concurrent programs in Python. It was initially released with Python 3.4, greatly improved in 3.5, and has a solidified &lt;span class="caps"&gt;API&lt;/span&gt; in 3.6. If you’re not entirely sure what “concurrent” means, you should be aware that there are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Asyncio is a relatively new standard-library solution for writing concurrent programs in Python. It was initially released with Python 3.4, greatly improved in 3.5, and has a solidified &lt;span class="caps"&gt;API&lt;/span&gt; in 3.6. If you’re not entirely sure what “concurrent” means, you should be aware that there are some subtleties in the terminology surrounding the topic (one great place to learn more is a talk called &lt;a href="https://blog.golang.org/concurrency-is-not-parallelism"&gt;Concurrency is Not Parallelism&lt;/a&gt; by Rob Pike). But, for the sake of this tutorial you can just think of a concurrent program as one that tries to “do many things at once” – a common example might be a web server handling many requests from different users. Asyncio is an important development for Python – the language has arguably been missing support for native concurrency comparable to that in node.js or Go, to name two&amp;nbsp;examples.&lt;/p&gt;
&lt;p&gt;If you’re trying to use asyncio and you find yourself frustrated, you should know that you’re not alone. At present, getting started developing with asyncio is still somewhat difficult. The module contains a confusing array of primitives, as Armin Ronacher &lt;a href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/"&gt;describes&lt;/a&gt;, and the changes that were made between Python 3.4 and 3.5 only add to the confusion. From my perspective, the official documentation is still an unfinished product. Hopefully, it will improve to match the rest of the excellent Python standard library docs now that major changes to asyncio are less likely. There are various tutorials describing things you can build with asyncio, as well as guides to the higher-level concepts behind asyncio-style concurrency. However, if you’re stuck trying to write your first few scripts on your own, this post might help you past that&amp;nbsp;roadblock.&lt;/p&gt;
&lt;p&gt;In an appearance on the &lt;a href="https://talkpython.fm/episodes/show/107/python-concurrency-with-curio"&gt;Talk Python to Me&lt;/a&gt; podcast, David Beazley expressed his frustration that so many explanations of complex libraries like asyncio start with the technical underpinnings of the design and then build up to providing practical information about using the tool. For some people, writing toy examples to play around with is the best way to grow that lower-level understanding. I’ll try to identify what you need to get started writing simple asyncio programs and explain a few details about how the module works. There are also links to the standard library documentation for each&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;Note that, for the sake of simplicity, everything in this guide assumes you’re using Python 3.5+ (preferably 3.6, it’s great!). If you see things like &lt;code&gt;yield from&lt;/code&gt; or &lt;code&gt;@asyncio.coroutine&lt;/code&gt; elsewhere, the author is probably using Python 3.4. The 3.5+ equivalents are &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;async def&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://docs.python.org/3/library/asyncio-task.html#coroutines"&gt;Coroutines&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you start writing a program with asyncio, the first thing you’ll want to do is define some coroutines. In asyncio, coroutines serve the same role as functions do in normal, synchronous code – they help break up the problem into smaller pieces. A coroutine looks a lot like a normal Python function, except that you add an &lt;code&gt;async&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code inside a coroutine can be identical to the code inside a function body – you can assign variables, call synchronous functions, &lt;code&gt;print()&lt;/code&gt; things, etc. You can also do something that you can’t do inside a function: call other coroutines! To call a coroutine from inside another coroutine, you can use the &lt;code&gt;await&lt;/code&gt; keyword, and then invoke the coroutine as you would a&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, the coroutine &lt;code&gt;baz&lt;/code&gt;, defined elsewhere, will be run, and whatever it returns will be assigned to &lt;code&gt;bar&lt;/code&gt;. You can also run &lt;code&gt;baz&lt;/code&gt; without storing its result: &lt;code&gt;await baz()&lt;/code&gt;. Calling a coroutine inside another coroutine is intentionally designed to resemble calling a function. However, don’t forget: you’ll get a &lt;code&gt;SyntaxError&lt;/code&gt; if you use &lt;code&gt;await&lt;/code&gt; in synchronous&amp;nbsp;code.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://docs.python.org/3/library/asyncio-eventloops.html#event-loops"&gt;Event&amp;nbsp;Loops&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After reading that last sentence, you might be wondering: how do you call the ”first“ coroutine before using &lt;code&gt;await&lt;/code&gt; syntax to call the others? There must be a way to call coroutines ”normally“. If you’re the experimenting type, you might try calling a coroutine just like a function: &lt;code&gt;foo()&lt;/code&gt;. You’ll see that nothing seems to occur (although something does happen behind the scenes). Interestingly, when you call a coroutine without &lt;code&gt;await&lt;/code&gt;, you don’t actually start running the code inside the coroutine. Rather, the coroutine initializes itself and then waits for something else to tell it to&amp;nbsp;run.&lt;/p&gt;
&lt;p&gt;So, getting back to our question: how do you run a coroutine when you aren’t already inside of another coroutine? The answer is, you have to manually “schedule” its execution. Remember, we’re trying to write programs that “do many things at once” – in this context, “scheduling” a coroutine means adding it to the set of “things” that we want to run concurrently. In order to manage this set of scheduled coroutines, we have to introduce another important asyncio concept: the event loop. I’ll explain more about what event loops are a little later, but for now you should just think of them as the black box responsible for managing the execution of all coroutines that are running at any point in time. Asyncio has a built-in function that returns the default event&amp;nbsp;loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;our_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://docs.python.org/3/library/asyncio-task.html#task"&gt;Tasks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have our event loop, we need to tell it to schedule and run a coroutine. To do that, we’ll only need a few lines of code. First, as discussed above, we initialize our&amp;nbsp;coroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;our_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;our_coroutine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ve named the variable &lt;code&gt;our_task&lt;/code&gt;, because &lt;code&gt;Task&lt;/code&gt; is what asyncio calls an initialized coroutine. Task objects have some useful methods, but we don’t need to worry about them for now. Understanding exactly what &lt;code&gt;Tasks&lt;/code&gt; are (and &lt;code&gt;Futures&lt;/code&gt;, of which &lt;code&gt;Tasks&lt;/code&gt; are a subclass) isn’t critical for writing simple asyncio programs. Then, we tell our event loop (which we created earlier) to run our&amp;nbsp;task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;our_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;our_task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that’s it! The event loop will manage the execution of our coroutine until it returns. Whatever &lt;code&gt;our_task&lt;/code&gt; returns will also be returned by &lt;code&gt;run_until_complete&lt;/code&gt;. As a side note, when we use &lt;code&gt;await&lt;/code&gt; syntax to call a coroutine, that coroutine is also being scheduled by the event loop. In that case, asyncio handles the scheduling automatically, instead of having us do it ourselves. So, if &lt;code&gt;our_coroutine()&lt;/code&gt; is awaiting other coroutines, the event loop is scheduling those as&amp;nbsp;well.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://docs.python.org/3/library/asyncio-task.html#task-functions"&gt;Task&amp;nbsp;Functions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With just these tools, you can start writing some toy programs to get a better feel for using asyncio. However, chances are you’ll often want to start many coroutines at the same time, and wait for all of them to complete before proceeding. Asyncio offers a few built-in ways to &lt;code&gt;await&lt;/code&gt; many coroutines at the same time using just one line of code. The two most immediately useful ones are &lt;code&gt;asyncio.gather()&lt;/code&gt; and &lt;code&gt;asyncio.wait()&lt;/code&gt;. The difference between them is somewhat subtle. &lt;code&gt;asyncio.gather()&lt;/code&gt; takes a sequence of tasks (aka initialized coroutines) passed in directly as a &lt;code&gt;*arg&lt;/code&gt;. If you have, say, a list of tasks, using &lt;code&gt;asyncio.gather()&lt;/code&gt; looks&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# you will have written and initialized these tasks earlier, as above&lt;/span&gt;
&lt;span class="n"&gt;list_of_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_of_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the other hand, asyncio.wait() takes the entire sequence as its&amp;nbsp;argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tuple_of_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# could be a list, dict keys, etc&lt;/span&gt;
&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuple_of_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Along with the syntax, there is a functional difference between &lt;code&gt;gather&lt;/code&gt; and &lt;code&gt;wait&lt;/code&gt;. With &lt;code&gt;gather&lt;/code&gt;, you have no control over the coroutines that are being executed. You can’t cancel them or make them time out. With &lt;code&gt;wait&lt;/code&gt;, you can interact with specific tasks and cancel them. You can also control the conditions under which &lt;code&gt;wait&lt;/code&gt; returns – for example, you can have it return immediately when any one of the coroutines you passed in finishes, rather than waiting for all of them. You can read &lt;a href="https://docs.python.org/3/library/asyncio-task.html#task-functions"&gt;this&lt;/a&gt; section of the documentation for more details. There are a few more useful task functions listed there as well: take a look at &lt;code&gt;as_completed&lt;/code&gt; and &lt;code&gt;sleep&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;More on event&amp;nbsp;loops&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, event loops are the “black boxes” that run multiple coroutines simultaneously. Event loops are designed to deal with the problem of how to &amp;#8220;do many things at once&amp;#8221; when you can only perform a single computation with each &lt;span class="caps"&gt;CPU&lt;/span&gt; cycle. As an illustrative analogy, let’s say you’ve sent a message to ten different friends and you’re waiting for them to respond. When you do receive a response, you’ll then take the time to read it. However, let’s pretend that you can only check for a response from one friend at a time, rather than all of them at once. Your solution would likely be to look for a new message from each friend in sequence, and then repeat this process from the top of the list. This is more or less what an event loop does! Event loops are used throughout your computer when something needs to monitor and wait for a “message” of some sort. For example, something resembling an event loop is used by your &lt;span class="caps"&gt;USB&lt;/span&gt; driver to register input from a &lt;span class="caps"&gt;USB&lt;/span&gt; keyboard. Some code for a very simple event loop might&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coroutine&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coroutines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_computation_to_run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, the asyncio event loop implementation contains something like this &lt;code&gt;while&lt;/code&gt; loop, albeit surrounded by a lot of other code designed to make it more efficient. You can see it in the CPython source code, here: https://github.com/python/cpython/blob/3.6/Lib/asyncio/base_events.py#L420-L423. Modern event loops don’t run continuously, but rather use events called “interrupts” to pause and resume their execution. This makes sense, because having a constantly running loop is an inefficient use of &lt;span class="caps"&gt;CPU&lt;/span&gt; cycles, especially when you don’t expect events to occur particularly frequently. If, in the above example, you’re expecting a new message from your friends every 2 hours or so, cycling through your messaging app constantly is probably not the best use of your time. Further details about event loop implementations are interesting, but outside the scope of this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Asyncio comes with its own default implementation of an event loop, but using it isn’t essential to the functioning of asyncio. If you’d like, you can switch out the default event loop for a third-party event loop implementation. One such external event loop module that’s getting a lot of attention is &lt;a href="https://magic.io/blog/uvloop-blazing-fast-python-networking/"&gt;uvloop&lt;/a&gt;. Switching to another event loop is as simple as installing it with pip, importing it, and selecting&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uvloop&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uvloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_event_loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_event_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, the default event loop is fine for most purposes that aren’t overly concerned about performance – it’s just worth noting that it’s a piece of code like anything else and isn’t somehow magically baked into&amp;nbsp;asyncio.&lt;/p&gt;
&lt;h2&gt;Final&amp;nbsp;thoughts&lt;/h2&gt;
&lt;p&gt;One potential point of confusion when using asyncio revolves around the difference between “blocking” and “non-blocking” code. You’re familiar with the concept of blocking even if you don’t realize it yet – all synchronous code is blocking when run on the Python interpreter. Blocking code is code that prevents the program from continuing until it has finished executing. When you write normal Python, you can rely on the interpreter to execute the code in the order you wrote it because each instruction “blocks” until it finishes. As I mentioned above, you can run any synchronous code from inside an asynchronous coroutine. However, if any of your synchronous code has the potential to pause and not complete, it can bring the execution of your entire program to a halt. This is why, for example, you shouldn’t use the popular &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; library to make http requests inside a coroutine. Instead, you should use a library like &lt;a href="https://aiohttp.readthedocs.io/en/stable/"&gt;Aiohttp&lt;/a&gt;, which implements non-blocking http requests using asyncio coroutines. On the other hand, even though something like &lt;code&gt;print()&lt;/code&gt; is technically blocking, it’s safe to use because its behavior and execution time is&amp;nbsp;predictable.&lt;/p&gt;
&lt;p&gt;When I first started trying out asyncio, I found it frustrating and hard to use. I wanted to write something like the concurrent version of “hello world”, whatever that may be, but it wasn’t obvious how to do so. With just the information from this tutorial, I hope you’ll be able to write a simple program that, say, runs a bunch of coroutines which each count up to 10 concurrently. &lt;a href="https://gist.github.com/dputtick/c76039b11f86b1a58c458321a5bbac20"&gt;Here’s a gist&lt;/a&gt; with an example in case you’d like some inspiration. Since so many applications of concurrency involve programming for the web, you might want to try something like writing a small web crawler once you’ve got the hang of basic asyncio concepts. Best of&amp;nbsp;luck!&lt;/p&gt;
&lt;p&gt;Thanks to Julia Evans, Laura Lindzey, and Emil Sit for their comments and&amp;nbsp;suggestions.&lt;/p&gt;</content><category term="writing"></category></entry><entry><title>Naming things</title><link href="https://www.danielputtick.com/writing/naming-things.html" rel="alternate"></link><published>2017-06-01T14:00:00-04:00</published><updated>2017-06-02T14:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-06-01:/writing/naming-things.html</id><summary type="html">&lt;p&gt;Naming things  – choosing a string of characters to represent a given expression – can be frustrating and difficult. This might be obvious, but the abstraction of referring to a block of code with something memorable and human readable greatly increases the ease of programming. Whoever first realized that we could use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Naming things  – choosing a string of characters to represent a given expression – can be frustrating and difficult. This might be obvious, but the abstraction of referring to a block of code with something memorable and human readable greatly increases the ease of programming. Whoever first realized that we could use memorable words like &lt;span class="caps"&gt;MOV&lt;/span&gt; and &lt;span class="caps"&gt;GOTO&lt;/span&gt; instead of numeric opcodes was responsible for a huge advance in programming language design. In a sense, every time we abstract away a function, script, module, or program using a name, we’re building on that simple idea. Being able to reference other parts of a program is important in its own right, but it isn’t nearly as effective if you have to refer to your function by say, its location in memory, rather than a name that describes what it does. However, when we choose names to take advantage of this abstraction superpower, there’s an inherent conflict between brevity and being descriptive. Deciding how to name things has been referred to as one of the hardest problems in programming&lt;sup id="fnref:fn-1"&gt;&lt;a class="footnote-ref" href="#fn:fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;. I’ve been thinking about how to do a better job at this lately, and here are some notes I’ve made on the topic. Some of them might seem sort of contradictory – I think that’s just an indication of how naming things is complex and&amp;nbsp;nuanced.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good design makes it easier to name things. Dividing your code up into modular parts is an important part of writing clean, maintainable software. If the name of a component isn’t at least somewhat intuitive based on what it does, it’s possible that you’ve chosen to break up your problem in a less than optimal way. Also, once you have descriptively named and well documented components that have a clear interface and that only do one thing, the problem of naming things used inside the scope of that component becomes&amp;nbsp;easier.&lt;/li&gt;
&lt;li&gt;Consider potential sources of ambiguity, especially from the perspective of somebody who isn’t familiar with the overall structure of the project. In &lt;a href="https://github.com/CIRCL/PyCIRCLean"&gt;PyCIRCLean&lt;/a&gt;, there are times when we have a single method containing separate references to each of: a string representing a path to a file, a Python file object, and a class containing information about a file. If we had static types or type hints, the reader would receive extra information to help understand what each variable refers to. Given that we don’t have type information, we decided on names like “file_path”, “opened_file”, and “file_object”. Always considering your reader’s perspective aligns with good programming practices in general (and is a principle of writing good prose,&amp;nbsp;too).&lt;/li&gt;
&lt;li&gt;Sometimes the right name won’t occur to you right away. It’s ok and worthwhile to wait for the perfect name if one isn’t immediately obvious, rather than forcing a name that isn’t great. But, you also don’t want to get stuck spending an hour optimizing one name. An adequate solution is to just use whatever name you come up with and then come back when you’ve had time to think of something better. However, take care – suboptimal names can proliferate and become more difficult to change with&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;Generally speaking, the greater the infrequency or “distance” between usages of a component, the longer and more descriptive its name should be. Names that are used infrequently and far apart won’t easily stick in the reader’s memory, and they’ll have to frequently consult the documentation or the location in the program where the name is defined. A more descriptive name will help smooth the process of understanding what the code does. On the other end of the spectrum are examples like the convention of using &lt;code&gt;i&lt;/code&gt; to count the current loop number or index into an array/list. Somebody reading the code can see the entire context for the variable’s usage inside one screen height of their text editor, so they don’t have to keep any extra information in their head. Thus, a short and un-descriptive name is&amp;nbsp;sufficient.&lt;/li&gt;
&lt;li&gt;Be especially careful with global variables, public attributes, or names that are referenced often throughout a program. If something is referenced many times, future programmers (including yourself) will be more reluctant to change it. Also, if you’re going to be exposing an &lt;span class="caps"&gt;API&lt;/span&gt;, your users will not be happy if you make breaking changes. Do the best that you can the first time, and don’t be afraid to take a little extra time to make the decision. As a side note, a variable appearing in many different locations &lt;em&gt;can&lt;/em&gt; be an indication that you should consider reorganizing your code. Sometimes, you do need global variables, but having naming issues with a global variable is a code smell that you should at least think carefully&amp;nbsp;about.&lt;/li&gt;
&lt;li&gt;One thing that sometimes comes up in discussions of  variable naming is &lt;a href="https://en.wikipedia.org/wiki/Hungarian_notation"&gt;Hungarian notation&lt;/a&gt;: the practice of including meta-information about a component in its name. This can include information about a broader category that the component belongs to, or its actual data type. Although many discussions of variable name argue against Hungarian notation, I’d encourage you to read &lt;a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/"&gt;Making Wrong Code Look Wrong&lt;/a&gt; by Joel Spolsky. Essentially, his argument is that Hungarian notation as it was originally conceived of provides a useful way of, well, making wrong code look&amp;nbsp;wrong.&lt;/li&gt;
&lt;li&gt;Follow conventions set elsewhere in the codebase. Let’s say you start working on a large Python project for the first time. You’ve previously read that, in Python, variable names are normally lowercase_with_underscores, and every other project you’ve seen has followed that convention. In your new project, however, you see that variable names are in camelCase. What should you do? First, whatever you do, you’ll want to maintain uniformity throughout the codebase – the worst option is to start using lowercase variables in your contributions and not tell anyone. This is because projects that don’t have uniform style are generally harder to read. Depending on how large the codebase is, you could spend some time making everything Pythonic. In the worst case scenario, this could take a few weeks, potentially break things, and annoy your coworkers with the massive diff you will generate. In that case, the best course of action is to imitate the style of the rest of the project, regardless of what it&amp;nbsp;is.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:fn-1"&gt;
&lt;p&gt;&lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;https://martinfowler.com/bliki/TwoHardThings.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="writing"></category></entry><entry><title>On pair programming</title><link href="https://www.danielputtick.com/writing/pairing.html" rel="alternate"></link><published>2017-05-24T16:00:00-04:00</published><updated>2017-05-24T16:00:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-05-24:/writing/pairing.html</id><summary type="html">&lt;p&gt;As I described at length in my &lt;a href="https://www.danielputtick.com/journal/return-statement.html"&gt;Return Statement&lt;/a&gt;, I spent part of summer 2016 at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;. In that piece, I mentioned pair programming as an important part of the &lt;span class="caps"&gt;RC&lt;/span&gt; experience. Being in an environment that encourages and facilitates it was a great opportunity. I paired for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I described at length in my &lt;a href="https://www.danielputtick.com/journal/return-statement.html"&gt;Return Statement&lt;/a&gt;, I spent part of summer 2016 at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;. In that piece, I mentioned pair programming as an important part of the &lt;span class="caps"&gt;RC&lt;/span&gt; experience. Being in an environment that encourages and facilitates it was a great opportunity. I paired for the first time at &lt;span class="caps"&gt;RC&lt;/span&gt;, but I felt that I didn’t pair as much as I could have. Anecdotally, it seems that many &lt;span class="caps"&gt;RC&lt;/span&gt; alumni also wish they had paired more during their batch. To help understand why pairing is worthwhile and why it can be difficult to do more of it, I decided to explore the topic in detail. In this piece, I’ll address two questions. First, what are the benefits and drawbacks of pair programming? And second, what are some concrete suggestions to make pairing sessions more&amp;nbsp;successful?&lt;/p&gt;
&lt;p&gt;In preparation, I read various blog posts and academic papers, tried a few pairing experiments myself, and talked with programmers I know about their pairing experiences. I’ll do my best here to summarize the conclusions I drew. First of all, I’d like to note that, in my opinion, there’s an important distinction between pairing full-time at work and pairing part-time and/or outside of work. Pairing full-time needs to be sustainable over periods of weeks or months, and different challenges arise when spending such a large amount of time working so closely with others. In addition, the goals of pairing sessions are different depending on the context. When pairing full-time, the main concern is having overall productivity and code-quality equal to or exceeding what is possible when working individually. With part-time pairing, the aim is to solve a specific problem or learn something&amp;nbsp;new.&lt;/p&gt;
&lt;p&gt;There isn’t a universal definition of pair programming, but it might be helpful to briefly identify what makes it different from ordinary collaboration. Perhaps this is obvious, but a key aspect of pairing is sharing one screen between two people. Talking with somebody about your code or sitting next to them and working on the same project separately doesn’t count as pairing. Most definitions of pairing mention an explicit division of labor between the “navigator” and the “driver”, with those roles usually trading off frequently. The driver is responsible for inputting text, while the navigator helps talk through problems, watches for mistakes, makes suggestions, and looks up reference material. This avoids the chaos of two people trying to type at the same&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Technical aspects of pair&amp;nbsp;programming&lt;/h3&gt;
&lt;p&gt;When looking at the benefits of pair programming, opinions seem fairly unanimous that it tends to increase code quality. One way it does this is by causing a dramatic decrease in the frequency of simple mistakes and small bugs. Avoiding small errors is hugely valuable, as anyone who has spent 8 hours debugging the results of a random typo can attest. Depending on your opinion about how costly these bugs are overall, this alone might be enough to justify pairing frequently or full-time. You could argue that linters and proper tooling can catch most mistakes of this category, but there are certain things that linters will miss. For example, if you have a typo that references a variable name that hasn’t been defined, a linter will identify the mistake, but if you accidentally refer to a different variable from the one you intended, the linter won’t give you an&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;From a bigger-picture point of view, you can also think of pairing as a type of constant ongoing code review. Having another person to discuss design questions with during the process of programming should certainly contribute to improving the quality of architectural decisions. However, one thing pairing doesn’t exactly provide for is time to think deeply. If you don’t explicitly make space for it, the fact that you’re talking and typing constantly while pairing doesn’t leave much time to think. If one person is convinced that they have the right solution, but the other has the feeling that there is more to consider, it can be difficult to say “wait, we need to take a break to think this over.” If there are differences between the pair in bias to action or active versus reflective learning styles&lt;sup id="fnref:fn-1"&gt;&lt;a class="footnote-ref" href="#fn:fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, one person’s ideas might be undervalued. If the best solution to a problem is not the most obvious one, pairing could make you more likely to miss it. I’ll talk more about how you can structure pairing to prevent these sorts of outcomes&amp;nbsp;later.&lt;/p&gt;
&lt;h3&gt;Human&amp;nbsp;factors&lt;/h3&gt;
&lt;p&gt;Many of the sources I read reported human-related factors as a major component of whether or not pairing is successful. The need for high levels of focus and constant attention mean that pair programming can be exhausting. If you’re more introverted, or if having somebody else look at your code causes anxiety, you’ll likely feel even more tired. If you’re pairing in the workplace full-time it will probably take a while to become fully acclimated and avoid ending every day with your energy levels depleted. One thing that helps is taking regularly scheduled breaks. I think pair programming integrates particularly well with the &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro Method&lt;/a&gt; for this reason. In fact, this is a positive aspect of pairing: if properly organized and planned, it can help programmers maintain their energy levels and (hopefully) be more effective as a result. Having two people for accountability is more effective than relying on your own&amp;nbsp;self-discipline.&lt;/p&gt;
&lt;p&gt;One benefit of pairing that was mentioned repeatedly is that pairing is an actively &lt;em&gt;fun&lt;/em&gt; experience. If you have a personality type that draws energy from collaborative activities, pairing is a way to satisfy that need with a pursuit that otherwise takes place in solitude. But, as I mentioned above, if you’re on the introverted side of the introvert-extrovert scale, pairing can be more stressful than pleasant. Even if you do find find working with others enjoyable, perhaps this is outweighed by the anxiety of exposing your thought process or self-perceived skill level to somebody else. For some people, programming alone is preferable, and this doesn’t make you less of a programmer or mean that something is wrong with you. In fact, it might even be useful to consider pairing a related but entirely different activity than programming alone. At least, from my personal experience, the subjective &lt;em&gt;feeling&lt;/em&gt; of pair programming is different, much the same way that team activities or sports differ from things like running or painting on your&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;Another frequently mentioned benefit of pairing was the value of the constant exchange of information between pairing partners. In my opinion, one of the most fulfilling aspects of programming is learning from and teaching others. Additionally, sharing knowledge is a great way to clarify and solidify concepts in your mind. Multiple resources mentioned that knowledge transfer was particularly effective in cases with a gap in domain-specific knowledge. For example, an expert in a specific programming language can teach somebody else with a strong grasp of generalized programming concepts a large amount in a short period of time. A team with diverse backgrounds that encourages pairing probably distributes knowledge rapidly between its various members, which likely results in a high rate of individual growth as programmers. In today’s hiring market, where so many companies claim to be struggling to find more experienced programmers, pairing seems like a secret weapon to combine with the alternative strategy of hiring less experienced candidates and teaching them what they need to&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;Every programmer knows that programming can be extremely difficult and frustrating. This can inevitably lead to procrastination, regardless of how much discipline you have. Pairing is a great way to help cope with this problem, because it gives you a partner in helping to stay on task. Several of the blog posts I read reported that pairing decreased the amount of time they spent repeatedly checking email and doing other menial tasks. This is great for everybody: programmers are more productive, and they can spend less time working to achieve the same results. To me, 6 to 8 hours of highly focused work is much better than 10 hours littered with distractions and suboptimal use of&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Suggestions for better pairing&amp;nbsp;sessions&lt;/h3&gt;
&lt;p&gt;As I’ve discussed, there are both benefits and drawbacks that come with pair programming. Some of these are inherent; for example, if you have strong introvert tendencies pairing will probably be more difficult for you. However, there are specific ways to structure pairing that can result in higher levels of enjoyment and productivity. I’ve already mentioned one: taking frequent breaks to avoid burnout. Another solution to burnout is to rotate pairing partners frequently. After all, many of us have experienced that spending too much time with the same person can be exhausting. This is also a solution to not having enough time to think deeply while pairing. A 30 minute break to read reference material and think about the problem individually before regrouping can pay great dividends in that&amp;nbsp;regard.&lt;/p&gt;
&lt;p&gt;When pairing, try to have clear expectations and goals for each session. Of course, it’s fine to ask somebody to pair with you and figure it out as you go – spontaneity can be worth preserving. However, it’s definitely worth it to take a moment and say, “this is what we want to accomplish, this is how long we’re going to work before taking a break, and this is what we’ll do if we get stuck.” If one person thinks the goal of a pairing session is to fix a specific bug, and the other thinks that the goal is to learn more about a general topic, the session is less likely to be successful. The importance of communication lasts during the pairing session as well; if things aren’t working, it’s important to speak up and try to change something. One sometimes underrated aspect of good communication is generally just being kind and respectful. Facilitating an environment where everybody can speak up if they don’t understand something is also important&lt;sup id="fnref:fn-2"&gt;&lt;a class="footnote-ref" href="#fn:fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;, especially when there are potentially large knowledge and experience&amp;nbsp;asymmetries.&lt;/p&gt;
&lt;p&gt;It’s easy for the more experienced programmer to dominate a pairing session, especially when the difference in experience is large. In that situation, it helps to let the less experienced person drive. It might result in things moving slower, but it will ensure that they aren’t being left behind. One surprisingly frustrating aspect of this arrangement can be that newer programmers are often slower at inputting text and using the keyboard efficiently. There isn’t an easy solution, but the more experienced person can take the opportunity to teach a few keyboard shortcuts. Another particularly tricky part of pairing occurs when each person has a different idea of how to solve a problem. At that moment, being willing to try the other person’s solution first regardless of who you think is right can really improve the experience for both of&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;Another important aspect of pairing successfully is making sure to use the right tools. If you have access to an external monitor, the extra screen space and visibility makes a big difference. I experimented with pairing using two keyboards and found it interesting and useful, although it did make it easier for the navigator to take over from the driver, so some level of structure and communication was required to avoid frequently “interrupting” each other. One surprisingly large barrier to effective pairing is differences in text editor preferences and configuration. It won’t be easy to switch between driver and navigator roles if you have to reopen the document in a different editor or switch to using a different shell each time. From a more philosophical point of view, this seems to me to be an argument against “excessive” customization or using niche tools. I might be wrong though – Vim and Sublime are both widely used, and yet fairly incompatible. I’m not sure there’s a great solution to this, other than perhaps making an effort to be familiar with multiple different text editors, or prioritizing pairing with people who use the same text editor as&amp;nbsp;you.&lt;/p&gt;
&lt;h3&gt;Other&amp;nbsp;thoughts&lt;/h3&gt;
&lt;p&gt;If you’re interested in pairing more but don’t have something like the Recurse Center to facilitate it, there are several possibilities. The first is to try pairing more at work! It might take some extra effort to better structure your environment for pairing (perhaps involving some of the above suggestions), but otherwise, you just need one other interested coworker to get started. If you don’t currently work as a programmer, you can pair with a friend or find a pairing partner at a meetup. Pairing doesn’t necessarily involve working on a massive project or something with real-world applications. Just pick a problem from a site like Project Euler or Hackerrank and see how far you can get in an hour. In fact, these smaller problems are a great way to start, because it’s a small commitment if things don’t go as well as you’d&amp;nbsp;hoped.&lt;/p&gt;
&lt;p&gt;There are some interesting questions to ask about pairing from the perspective of a team lead or manager. From a company’s point of view, the concerns about pair programming seem twofold. First, will the potential increase in code quality and employee happiness be worth the tradeoffs? As an extreme example, for a startup with 4 programmers, switching from 4 to 2 ongoing “lines of development” by pair programming full-time sounds pretty scary. It seems like it’s still probably worth it if your team will be more productive overall, but it’s certainly a valid question. Second, what will you do about the otherwise excellent developers, either current or prospective employees, who aren’t comfortable with pairing? Fortunately, I think that pairing doesn’t require a large initial commitment. You can start by making a small investment in arranging your space to make it easy to pull up a chair and join a coworker at their desk, and then see if you have any team members who’d like to take advantage of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Another exciting development is the elimination of physical proximity as a constraint for pairing. There are numerous tools emerging for pair programming remotely. The simplest option is to just use the screen sharing feature in Skype/Hangouts etc. This doesn’t allow for easy switching between navigator and driver, but for a casual pairing session, that might be fine. There are also more specialized tools, such as Screenhero, Floobits, or tmate, which allow both people to type in a shared text editor. I haven’t tried any of this category yet – maybe I’ll write a post in the future reviewing some of them, but I wanted to be sure to mention this as something worth&amp;nbsp;exploring.&lt;/p&gt;
&lt;p&gt;It can be difficult to get started pair programming, but it’s a great way to grow as a programmer and to write better code. I hope that reading this has inspired you to consider pairing more, and that there were some useful suggestions that might make pairing work better for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;The sources I&amp;nbsp;used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.pivotal.io/labs/labs/pair-programming-considered-extremely-beneficial"&gt;Pairing at&amp;nbsp;Pivotal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mwilden.blogspot.com/2009/11/why-i-dont-like-pair-programming-and.html"&gt;Why I don’t like pair&amp;nbsp;programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sarahmei.com/blog/2010/04/14/thoughts-on-two-months-of-pairing/"&gt;Thoughts on two months of&amp;nbsp;pairing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2014/08/05/pair-programming-is-amazing-except-when-its-not/"&gt;Pair programming is amazing (except when it’s&amp;nbsp;not)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.pivotal.io/labs/labs/pairing-isn-t-for-everyone"&gt;Pairing isn’t for&amp;nbsp;everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jvns.ca/blog/2014/03/01/pair-programming/"&gt;Pair&amp;nbsp;programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.recurse.com/manual#sec-pairing"&gt;Recurse center users manual/pairing&amp;nbsp;section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/raulavila/my-experience-with-pair-programming"&gt;My experience with pair&amp;nbsp;programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.utexas.edu/users/mckinley/305j/pair-hcs-2006.pdf"&gt;Pair programming&amp;nbsp;productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://collaboration.csc.ncsu.edu/laurie/Papers/XPSardinia.PDF"&gt;The costs and benefits of pair&amp;nbsp;programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://johannesbrodwall.com/2011/02/02/pair-programming-research-misses-the-most-important-point/"&gt;Pair programming research misses the most important&amp;nbsp;point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.utah.edu/~lwilliam/Papers/ieeeSoftware.PDF"&gt;Strengthening the case for pair&amp;nbsp;programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Laura Lindzey, Julia Evans, Khalid Omar Ali, and SengMing Tan for their advice and suggestions. Also to Rose Ames for doing a few pairing-related experiments with&amp;nbsp;me.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:fn-1"&gt;
&lt;p&gt;&lt;a href="http://blog.melchua.com/2014/08/12/learning-styles-for-programmers-activereflective/"&gt;http://blog.melchua.com/2014/08/12/learning-styles-for-programmers-activereflective/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn-2"&gt;
&lt;p&gt;&lt;a href="https://jvns.ca/blog/2017/04/27/no-feigning-surprise/"&gt;https://jvns.ca/blog/2017/04/27/no-feigning-surprise/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="writing"></category></entry><entry><title>Setting up the Stenomod</title><link href="https://www.danielputtick.com/journal/stenomod-setup.html" rel="alternate"></link><published>2017-05-16T00:19:00-04:00</published><updated>2017-05-16T00:19:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-05-16:/journal/stenomod-setup.html</id><summary type="html">&lt;p&gt;Humans have been using specialized systems of shorthand to record speech in real-time since antiquity. Starting in the late 1800s, automated stenotypes have offered an alternative to written shorthand. Typically, stenography has been reserved for settings where the precise recording of speech was important. One obvious modern example is in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Humans have been using specialized systems of shorthand to record speech in real-time since antiquity. Starting in the late 1800s, automated stenotypes have offered an alternative to written shorthand. Typically, stenography has been reserved for settings where the precise recording of speech was important. One obvious modern example is in the courtroom. Stenography is also important for making spoken word accessible to the deaf, as it allows for real-time captioning. In order to generate an accurate transcript and keep up with human speech, a stenographer must be capable of speeds greater than 200 words per minute. The qwerty keyboard, and indeed, all touch-typing keyboards, are not designed for this speed. For one, the qwerty layout was designed to prevent typewriters from jamming by placing letters that are commonly typed next to each other as far apart as possible. Thus, qwerty maximizes the distance that your fingers have to travel. Even more optimized layouts such as dvorak allow an above average typist to enter around 100 words per minute (the fastest typists exert great effort to go faster than 150). If you’re curious, you can test your own speed at &lt;a href="http://play.typeracer.com/"&gt;http://play.typeracer.com/&lt;/a&gt;. The inherent limitation with touch-typing is that every character must be entered individually. This is in contrast to the way that humans combine phonemes/syllables to form words while&amp;nbsp;speaking.&lt;/p&gt;
&lt;p&gt;A modern stenotype has an entirely different layout from a touch-typing keyboard. It has two sets of consonant sound keys grouped on either side, with four vowel keys in a row below them. When you enter text on a steno keyboard, you combine multiple keys into “chords”. The set of keys you press simultaneously determines the text that is entered. This is much closer to the way that human speech works. The chords are based around phonetics, which makes it easier to learn and keep track of the chords that represent the words you want. This also explains why writing at the pace of human speech is easier than on a touch-typing keyboard – you only have to complete about one “key press” per word. This is especially important for professional stenographers, who need to be able to type at that speed for many hours at a time without a&amp;nbsp;break.&lt;/p&gt;
&lt;p&gt;Historically, stenography equipment and training has come at a steep price. Older closer-source software and hardware systems were patented and access to them was controlled. For a licensed stenographer, a professional grade steno keyboard and software license sells for thousands of dollars new. The companies that sell the closed-source software also run the schools that teach steno, and charge a vast amount of tuition, artificially limiting the supply of stenographers. However, the situation has started to change recently, in part due to the work of the Open Steno Project and their open source steno software called Plover. In response to the success of Plover, &lt;span class="caps"&gt;DIY&lt;/span&gt; and homemade steno keyboards have begun to appear on the market, including the &lt;a href="https://stenomod.blogspot.com/"&gt;Stenomod&lt;/a&gt;, which retails for only $200 (about 1/4 of the price of the cheapest professional-grade steno keyboard). If you’d like, you can also use certain models of touch-typing keyboards for steno with&amp;nbsp;Plover.&lt;/p&gt;
&lt;p&gt;A few of us found out about steno via Mirabai Knight, who provided open captioning for &lt;a href="http://bangbangcon.com/"&gt;!!Con&lt;/a&gt; this year (and in years past). We decided to purchase a Stenomod to experiment with. Our hypothesis was that, assuming the learning curve isn’t too steep, stenography might in fact be a fundamentally better way to input text. Although all of us are programmers, I’m not sure that we’ll actually use the Stenomod for programming. Typically, the bottleneck for throughput with programming is the speed of thought, not the speed of typing. However, programmers and other knowledge workers spend large amounts of time responding to email and writing text associated with their code, including design documents and technical documentation. If steno allows you to write prose at closer to the speed at which you think, it might truly be worth&amp;nbsp;learning.&lt;/p&gt;
&lt;h2&gt;Stenomod Setup&amp;nbsp;Instructions&lt;/h2&gt;
&lt;p&gt;Now, the practical part of this post: our Stenomod arrived the other day and at first we had some trouble setting it up with MacOS. I thought I’d document the process, since we couldn’t find a complete set of instructions that explained our problem. First, a bit of background information. The Stenomod connects to your computer using a microUSB cable, which it uses both for power and to transmit data. When a normal &lt;span class="caps"&gt;USB&lt;/span&gt; keyboard transmits data as you type, it uses a universal protocol that the &lt;span class="caps"&gt;USB&lt;/span&gt; hid (human input device) driver in your kernel (operating system) can understand and decode. The Stenomod sends its data using serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt;. This means that the &lt;span class="caps"&gt;USB&lt;/span&gt; port is actually being used to simulate an old-style serial port, where information is sent as a stream of raw binary data (1s and 0s), and it is the application’s job to decode it. Depending on your &lt;span class="caps"&gt;OS&lt;/span&gt; you’ll probably have to install a device driver to allow your computer to handle serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt;. MacOS comes with a serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt; driver preinstalled starting with 10.9, but it isn’t the correct one for the current version of the Stenomod. You’ll also have to install Plover, whose job it will be to listen to the raw bytes the Stenomod is sending, decode them, and translate them into text that will then appear on your&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;The first step is to download and install the most recent stable version of Plover, which is available at &lt;a href="https://github.com/openstenoproject/plover/releases/latest"&gt;https://github.com/openstenoproject/plover/releases/latest&lt;/a&gt; for MacOS, Windows, and Linux. Next, you’ll ( have to install the correct serial-over-&lt;span class="caps"&gt;USB&lt;/span&gt; driver. Our Stenomod (shipped in May 2017) was built with a “Silicon Labs &lt;span class="caps"&gt;CP2103&lt;/span&gt; &lt;span class="caps"&gt;USB&lt;/span&gt; to &lt;span class="caps"&gt;UART&lt;/span&gt; bridge”. The drivers are available at &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers&lt;/a&gt;. On MacOS, you can double check that your Stenomod still uses the same component by plugging in the MicroUSB cable and opening the System Information app. Viewing the correct entry under Hardware/&lt;span class="caps"&gt;USB&lt;/span&gt; will show you information about the device including the manufacturer and model number. After the driver is installed, open Plover with the Stenomod connected. Click “Configure” and change the “Stenotype Machine:” to “&lt;span class="caps"&gt;TX&lt;/span&gt; Bolt”, which is the name of the serial protocol that the Stenomod uses. Click “Configure…” next to “&lt;span class="caps"&gt;TX&lt;/span&gt; Bolt”. In the “Port” dropdown, you should see the option for something like “/dev/cu.SLAB_USBtoUART” if the driver install was successful. Select that option. The rest of the defaults are correct: “Baudrate: 9600, Data bits: 8, Stop bits: 1, Parity: N, Use Timeout: True/2.0 seconds, &lt;span class="caps"&gt;RTS&lt;/span&gt;/&lt;span class="caps"&gt;CTS&lt;/span&gt;: False, Xon/Xoff: False”. “Ok” and “Save” the two menus, and “Enable” output in Plover. You should be able to start typing on the Stenomod&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;I’ll probably post more about our adventures fooling with the Stenomod in the future. At the moment it seems like an exciting time for stenography. A historical barrier to entry is in the process of being broken down, and we’re still in the early days of open access to steno keyboards and software. If demand continues to grow, more direct to consumer options will appear, and hopefully prices will continue to decline, making steno accessible to greater numbers of people. Currently, there is massive demand for qualified stenographers, particularly for accessibility-related work. There is also great potential for improved software solutions for learning steno quickly. If an experienced touch-typer can grow to match their qwerty typing speed over say, three months, then there is real potential for steno to expand beyond captioning and transcripts. I’m not sure that steno will “replace” touch-typing in any meaningful sense. But, employees in a significant portion of the economy spend their entire day either writing text or in meetings. If steno can provide a large enough increase in input speed for them while facilitating easier and more fluid communication, that could be incentive enough to make the&amp;nbsp;switch.&lt;/p&gt;</content><category term="journal"></category></entry><entry><title>CIRCLean</title><link href="https://www.danielputtick.com/journal/circlean.html" rel="alternate"></link><published>2017-03-30T16:10:00-04:00</published><updated>2017-03-30T16:10:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-03-30:/journal/circlean.html</id><summary type="html">&lt;p&gt;For the last few months, I’ve been working full-time on an interesting open source project called &lt;a href="https://github.com/CIRCL/Circlean"&gt;CIRCLean&lt;/a&gt;. CIRCLean solves a niche yet important problem: what you do you do when you are given a &lt;span class="caps"&gt;USB&lt;/span&gt; drive but cannot verify that the key is safe to use? There are various …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the last few months, I’ve been working full-time on an interesting open source project called &lt;a href="https://github.com/CIRCL/Circlean"&gt;CIRCLean&lt;/a&gt;. CIRCLean solves a niche yet important problem: what you do you do when you are given a &lt;span class="caps"&gt;USB&lt;/span&gt; drive but cannot verify that the key is safe to use? There are various exploits in the wild that use compromised &lt;span class="caps"&gt;USB&lt;/span&gt; key firmware as a vector, often referred to collectively as “BadUSB” attacks. These work by, for example, modifying the firmware of the key to make it “pretend” to be a keyboard and perform keystrokes on the target computer&lt;sup id="fnref:fn-badusb"&gt;&lt;a class="footnote-ref" href="#fn:fn-badusb"&gt;1&lt;/a&gt;&lt;/sup&gt;. Alternatively, an otherwise normal key can contain malware and deliver it either by exploiting a kernel vulnerability or even by simple user error. One newsworthy example of an attack delivered via &lt;span class="caps"&gt;USB&lt;/span&gt; key was the Stuxnet&lt;sup id="fnref:fn-stuxnet"&gt;&lt;a class="footnote-ref" href="#fn:fn-stuxnet"&gt;2&lt;/a&gt;&lt;/sup&gt; incident involving the Iranian nuclear&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;Although everybody should at least be aware of &lt;span class="caps"&gt;USB&lt;/span&gt;-based attacks, some individuals have reason to be particularly concerned. Journalists frequently receive source materials via &lt;span class="caps"&gt;USB&lt;/span&gt; key, including those delivered anonymously. For engineers working at sensitive infrastructure sites with air-gapped devices, the consequences of a successful attack are high enough that taking extra precautions with any files on a &lt;span class="caps"&gt;USB&lt;/span&gt; key is worthwhile. In both of these areas there is a high level of Windows &lt;span class="caps"&gt;PC&lt;/span&gt; usage (including older versions of Windows such as &lt;span class="caps"&gt;XP&lt;/span&gt;), which are known to have a especially high number of &lt;span class="caps"&gt;USB&lt;/span&gt;-based&amp;nbsp;vulnerabilities.&lt;/p&gt;
&lt;p&gt;CIRCLean attempts to solve this problem by leveraging a phenomenon that has only recently appeared: the widespread availability of cheap computers capable of running a full Linux distro. CIRCLean uses the Raspberry Pi to read the contents of a &lt;span class="caps"&gt;USB&lt;/span&gt; key without placing the user’s machine directly at risk. The central component of CIRCLean is a modified version of the Raspbian operating system. When a user inserts an untrusted &lt;span class="caps"&gt;USB&lt;/span&gt; key and an empty key and starts up the Pi, they are automatically mounted by a few shell scripts. Some &lt;a href="https://github.com/CIRCL/PyCIRCLean"&gt;Python code&lt;/a&gt; then processes and copies the files from the source key to the blank key. Attacks built into the firmware of the source key will be wasted on the Raspberry Pi and won’t be copied over&lt;sup id="fnref:fn-caveat"&gt;&lt;a class="footnote-ref" href="#fn:fn-caveat"&gt;3&lt;/a&gt;&lt;/sup&gt;. In addition, CIRCLean applies a set of fairly simple heuristics to the files and any that display suspicious characteristics are identified to the user as potentially&amp;nbsp;dangerous.&lt;/p&gt;
&lt;p&gt;The CIRCLean user interface is designed to be relatively easy for a non-technical user to understand and to avoid additional hardware requirements such as a monitor or input devices. Both keys must be inserted before the Raspberry Pi is plugged in. While analyzing and copying the files, music is played through the headphone port. When the process is complete, the Pi automatically shuts down. A log file is generated onto the destination key, containing information about the files present on the source key and any errors or warnings that occurred. Files that have been screened as potentially dangerous have their file path modified on the destination key to clearly indicated that this is the&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;Although it might appear functionally similar, CIRCLean is not a proper antivirus program. Antivirus programs are designed to help the user determine whether or not code can be safely executed. This often involves complicated steps such as running code in a sandbox and checking for signatures that resemble known samples of malware. Fortunately for us, users of CIRCLean are likely to only want certain categories of files, usually consisting of text, images, video, database/email dumps etc. CIRCLean’s heuristics are built around a tool called libmagic, which identifies filetypes based on the presence of specific bytes at specific locations in a file. This, along with a few other third-party open source libraries, helps us find files that contain executable code, or files that are different from what their extension suggests. As long as the user doesn’t run any executable code they are likely to be safe from most garden-variety&amp;nbsp;attacks.&lt;/p&gt;
&lt;p&gt;Why is CIRCLean an important project? First, freedom of the press is crucial for holding governments and institutions accountable to their constituents. Although we are heading towards only sharing files over the network, the proliferation of cheap &lt;span class="caps"&gt;USB&lt;/span&gt; storage means many files are still transferred this way. At the same time, governments are paying increased attention to information security, including using technology to exert control over their citizens. It’s critical for journalists to be able to receive information from sources without fear of placing themselves or their sources at risk. Given the shrinking budgets available for journalism, it’s beneficial for any solution to be open source and freely available. As I mentioned, &lt;span class="caps"&gt;USB&lt;/span&gt; key sanitization is a niche problem, so it’s not necessarily something that paid software was likely to&amp;nbsp;address.&lt;/p&gt;
&lt;p&gt;Of course, CIRCLean isn’t perfect. It is almost certainly vulnerable to an attack intentionally designed to bypass it. Furthermore, the code is freely available for attackers to analyze. But, the typical CIRCLean user is probably mainly trying to avoid generic off-the-shelf exploits. The vast majority of successful attacks rely on un-patched software and/or user error. That said, we’re always looking for ways we can further harden CIRCLean against targeted attacks. If CIRCLean gains more widespread adoption this will become even more of a&amp;nbsp;concern.&lt;/p&gt;
&lt;p&gt;The biggest priorities for CIRCLean going forward are improving verifiability and testability, improving the user interface, and making it easier to potentially leverage Python file handling code in other applications. So far, I’ve improved the documentation, both for potential contributors/technical users and for non-technical end users. I’ve also added a proper unit test suite for the Python code using pytest. Given the sensitive nature of this project, it’s essential that we can guarantee certain behavior when given a specific type of file as an input. Better tests and testing practices are a path to accomplishing this. I’ve also added some smaller features to our modified Raspbian kernel and made a new release incorporating the latest version of Raspbian. I’m currently working on improving the logging &lt;span class="caps"&gt;UI&lt;/span&gt; as well as restructuring the Python &lt;span class="caps"&gt;API&lt;/span&gt; so that it is easier to understand and use. I plan to write some more details about these aspects of the project in an upcoming&amp;nbsp;post.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:fn-badusb"&gt;
&lt;p&gt;&lt;a href="https://www.wired.com/2014/10/code-published-for-unfixable-usb-attack/"&gt;https://www.wired.com/2014/10/code-published-for-unfixable-usb-attack/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-badusb" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn-stuxnet"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Stuxnet"&gt;https://en.wikipedia.org/wiki/Stuxnet&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-stuxnet" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn-caveat"&gt;
&lt;p&gt;That is, unless they are specifically designed to transfer themselves to an uninfected &lt;span class="caps"&gt;USB&lt;/span&gt; key via a flaw in the Linux kernel, pmount, the &lt;span class="caps"&gt;USB&lt;/span&gt; driver, etc.&amp;#160;&lt;a class="footnote-backref" href="#fnref:fn-caveat" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="journal"></category></entry><entry><title>Return statement</title><link href="https://www.danielputtick.com/journal/return-statement.html" rel="alternate"></link><published>2017-03-28T11:00:00-04:00</published><updated>2017-03-28T18:51:00-04:00</updated><author><name>Dan Puttick</name></author><id>tag:www.danielputtick.com,2017-03-28:/journal/return-statement.html</id><summary type="html">&lt;p&gt;From July 5th to September 20th of 2016, I spent a majority of my waking hours at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, and I’ve been postponing writing about it ever since. It’s difficult to organize your thoughts immediately after such a &lt;em&gt;big&lt;/em&gt; thing has ended. In fact, I’m still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From July 5th to September 20th of 2016, I spent a majority of my waking hours at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, and I’ve been postponing writing about it ever since. It’s difficult to organize your thoughts immediately after such a &lt;em&gt;big&lt;/em&gt; thing has ended. In fact, I’m still not exactly sure what I mean by big. Attending &lt;span class="caps"&gt;RC&lt;/span&gt; feels like one of those turning points in life, resembling the societal stereotype of graduating from college or getting married. There’s a tradition of Recursers writing “return statements” (typical silly programming joke) to reflect on and summarize their experiences. When I was considering applying I found reading these both useful and inspiring. Before and during my batch I used them to help think more about what I wanted to work on and learn about. So, here’s my&amp;nbsp;attempt.&lt;/p&gt;
&lt;p&gt;What exactly is the Recurse Center? If you’ve never heard of it, the best place to start is the &lt;a href="https://www.recurse.com/manual"&gt;user’s manual&lt;/a&gt;. When I’m asked to describe &lt;span class="caps"&gt;RC&lt;/span&gt;, a few things come to mind. At its heart is a 6 or 12 week program that’s best described as a “writers retreat” for programmers. Attendees come from a wide range of experience levels and backgrounds. There are no teachers, curriculum, or grades, and you can work on your own toy ideas or existing open source projects. Actually, if you really wanted to you could just spend the whole 3 months talking about programming with everybody. As long as you’re consciously working to improve as a programmer, you’re succeeding. The word “consciously” in that sentence is a key point. At &lt;span class="caps"&gt;RC&lt;/span&gt; there’s a strong culture of thinking more generally about programming and the learning process. Asking and deeply exploring questions such as “what programming topics are worth learning about?” or “what can I do to become better at learning new things” is strongly&amp;nbsp;encouraged.&lt;/p&gt;
&lt;p&gt;The large and growing alumni community is just as important as the retreat itself. As of early 2017, the number of alumni is nearing 1,000. They form a rich network around the world, both online and in person. At this point I’ve learned not to be surprised when I read an interesting blog post and go on to find that its author is affiliated with &lt;span class="caps"&gt;RC&lt;/span&gt;. The community forms an excellent support network and provides opportunities for continuing to learn and grow as a programmer. Living in New York, I’ve also enjoyed spending time with friends I made during and after my batch. One frequently repeated quote that resonates strongly with me is that &lt;span class="caps"&gt;RC&lt;/span&gt; is the world’s best programming community with a three month onboarding&amp;nbsp;period.&lt;/p&gt;
&lt;p&gt;The thing that most surprises people about &lt;span class="caps"&gt;RC&lt;/span&gt; is that it&amp;#8217;s free to attend for everybody. The only expense is whatever it costs you to survive in New York City for three months. The natural question, then, is how can they possibly pay the bills? Once you’re a part of the community, they will help you get a job at companies that they have previously negotiated recruiting agreements with. If you end up taking one of these jobs, the companies pay &lt;span class="caps"&gt;RC&lt;/span&gt; a recruiter’s fee entirely separate from your salary. That said, the jobs staff is also more than happy to aid you in finding a programming job you&amp;#8217;ll love, even if it isn’t at one of these companies. Because of this financial arrangement there is a strong alignment of incentives between &lt;span class="caps"&gt;RC&lt;/span&gt; and the&amp;nbsp;alumni.&lt;/p&gt;
&lt;p&gt;Most people showing up to &lt;span class="caps"&gt;RC&lt;/span&gt; on the first day don’t quite know what to expect. That makes sense – there aren’t too many similar experiences to compare it with. One common emotion is a sudden rush of doubt about whether you deserve to be there. Despite that, the &lt;span class="caps"&gt;RC&lt;/span&gt; staff seem to do a remarkable job at choosing attendees with a very small amount of signal – you probably do belong even if you’re aren’t sure. Later in the afternoon on my first day I remember sitting down, opening my computer, and thinking, “oh, ok, hmmm, what do I do now?” This reflects the beauty of the whole thing – nobody will tell you what you should be doing and no activity is mandatory. One important aspect of &lt;span class="caps"&gt;RC&lt;/span&gt; that helps with acclimation is that people come for 3 month “batches”, and these batches overlap with each other for 6 weeks at a time. The group that has already spent 6 weeks in the space is a great resource for help getting settled. However, it’s important to note that if you can’t afford to spare 3 months there is the opportunity to do a 6 week half-batch&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;There isn’t exactly a “typical day” at &lt;span class="caps"&gt;RC&lt;/span&gt; because of how unstructured everybody’s time is. However, there are some things that are generally consistent. The official working hours are 10:30am-6:30pm. I found this useful because it enforced some sort of routine – just having an expectation of showing up to a specific place at a specific time was enormously useful for my productivity. This is, of course, completely optional. There were people in my batch who arrived at 9am everyday, and others who arrived at 2pm (or later). People at &lt;span class="caps"&gt;RC&lt;/span&gt; often joke that you could have just about the same experience if you just sat at home and programmed for three months. While funny (and perhaps somewhat true), I think this underrates the value of having a dedicated space for programming and a group of peers that share your interests and&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;Most of my time at &lt;span class="caps"&gt;RC&lt;/span&gt; was, unsurprisingly, spent on the computer, either writing code, reading code, or reading about writing code. I also spent a lot of time having interesting conversations with my batch-mates. Recursers will often give seminars or talks on various subjects. There are also recurring weekly events organized by people in the batch. The staff do not take an active role in sustaining these. They are created by attendees and alumni, and the job of making them happen is passed down as people come and go. Over time some traditions do fade, but the lack of structure means they can be resuscitated at any time, and new ones can arise to take their&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;One thing I truly did not anticipate being an important part of these three months wasn’t related to programming at all. Having grown up in Boston and lived in Atlanta before, I thought that my experience with big metropolitan areas meant that New York would be different in scale, but not on any more fundamental level. I was definitely wrong. At the beginning I arrived in New York unsure of whether I’d like living there full-time. In the past when I had visited I was sometimes overwhelmed by the typical things: noise, traffic, crowds. However, the experience was completely different with a permanent place to&amp;nbsp;sleep.&lt;/p&gt;
&lt;p&gt;I stayed in a tiny room in Brooklyn, away from Manhattan and near the calm and green space of Prospect Park, yet just a 25 minute ride on the Q to SoHo. Over the course of three months I learned every detail of the streets around &lt;span class="caps"&gt;RC&lt;/span&gt;. In particular, I grew to love Chinatown. There are so many small shops and delicious cheap food is around every corner. At times it can feel as though you’ve been magically transported to a foreign country. More generally, this is something I love about being in New York. The diversity that is present everywhere is invigorating. Every time you walk on the street you are never short of interesting sights, sounds, and smells, especially if you open your senses and pay attention that what’s around&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;One of my favorite parts of every week at &lt;span class="caps"&gt;RC&lt;/span&gt; was code dojo. Anybody who’s interested shows up and ad hoc pairs are formed. Everyone then works on a small programming problem for about an hour and presents their solutions to the group. I like pair programming because it takes the common conception of writing code as solitary pursuit and turns it on its head. When you can work with others who have more experience than you or who can potentially bring a different perspective to a problem, it’s possible to learn a huge amount in a short period of time. If you have more experience than the other person, the effort of explaining something can help you understand it in an even deeper way. For obvious reasons, pair programming is quite common at &lt;span class="caps"&gt;RC&lt;/span&gt;, and many alumni tend to wish they had done more of it during their batch. I found code dojo to be a great way to make myself spend more time pairing. Through 12 dojos I learned many new Python tricks, wrote a solution in &lt;a href="https://pyth.readthedocs.io/en/latest/getting-started.html"&gt;Pyth&lt;/a&gt;, and picked up some basics of Go and Elixir. Several of my closest friendships at &lt;span class="caps"&gt;RC&lt;/span&gt; began as pair programming&amp;nbsp;sessions.&lt;/p&gt;
&lt;p&gt;Another weekly feature at &lt;span class="caps"&gt;RC&lt;/span&gt; is Thursday presentations. These are an informal opportunity to show your batch-mates what you’ve been working on. There’s no pressure to present, but it’s a great way to get practice talking about technical subjects in front of a friendly and sympathetic audience. In all collaborative pursuits, being able to communicate what you’re working on is often nearly as important as being able to do the work itself. In science there is a strong culture of presenting your work – even as an undergraduate working in a lab I was expected to present every few months in front of the entire group. When trying to improve at technical presentations, there is fundamentally a bootstrapping problem. Without some experience it’s hard to have the confidence or the skills to give a talk to a bigger audience. But, it’s hard to get that experience without a venue to practice presenting. Meetups are one solution to this problem, but giving presentations at &lt;span class="caps"&gt;RC&lt;/span&gt; is a way to accomplish the same goal without having to do your first few talks in front of complete&amp;nbsp;strangers.&lt;/p&gt;
&lt;p&gt;One core part of &lt;span class="caps"&gt;RC&lt;/span&gt; that I haven’t touched on yet are the social rules. Much has been written about them elsewhere, including in the User’s Manual. I will say this: the social rules and the environment they create are critical to the functioning of &lt;span class="caps"&gt;RC&lt;/span&gt;. The combination of no “well actually”s and no feigning surprise creates an environment where you never have to make it appear like you know more about a thing than you do. In fact the effect goes beyond this, to the point that admitting your ignorance is actively encouraged. Doing so opens the possibility for somebody else to teach you something new. Also, it’s likely that you’re not the only person present who would like to learn more, thus the group as a whole benefits. The degree of radical openness at &lt;span class="caps"&gt;RC&lt;/span&gt; expanded my perspective on the spectrum of openness that’s possible in any collaborative situation. This felt especially significant as somebody who has spent time in scientific research where people so often go to great lengths to hide what they don’t know about for fear of being looked down&amp;nbsp;upon.&lt;/p&gt;
&lt;p&gt;A common question I get when I tell people about &lt;span class="caps"&gt;RC&lt;/span&gt; is “what did you work on”, especially from other programmers. This is difficult to answer because my dominant memories are not about specific projects that I finished. Instead, I think of the things I learned both about programming and myself. I also think of the people I spent 12 weeks hanging out and talking about programming with. So much of this learning wasn’t “this is how Python does this thing,” but rather learning how to think about programming, talk about programming, and learn about programming. As a purely self-taught programmer who hadn’t spent much time working with other programmers before, all of these were areas where I had plenty of room to grow. My perspective on what exactly programming is – all the different kinds of things computers can do – was expanded&amp;nbsp;drastically.&lt;/p&gt;
&lt;p&gt;Recently I’ve been thinking often about growth vs. fixed mindsets when it comes to learning. Being at &lt;span class="caps"&gt;RC&lt;/span&gt; convinced me that a focus on having a growth mindset can apply equally well to communities and organizations. It’s readily apparent that the &lt;span class="caps"&gt;RC&lt;/span&gt; staff are constantly seeking for ways to improve. There are of course connections between this and the fact that &lt;span class="caps"&gt;RC&lt;/span&gt; is technically a for-profit startup trying to find its way. But I think in large part it bubbles up from the growth mindsets of the individuals who attend. If you’re constantly thinking about how you can improve as a programmer, it’s natural to start thinking about how the environment you’re working in can itself improve. There are frequently new experiments, some of which are quite drastic, and things are rarely accepted just because “that’s the way we’ve always done it.” Even though they’ve been part of the community for a short period of time, Recursers in the current batch are encouraged to give suggestions for&amp;nbsp;improvements.&lt;/p&gt;
&lt;p&gt;Aside from the formal structure of the social rules, &lt;span class="caps"&gt;RC&lt;/span&gt; convinced me of the value of working with and spending time with nice people. I’m not sure there is that much more to say about this – obviously “nice” is by definition subjective. There have been efforts to somehow formalize this idea in things like the “no asshole rule,” and perhaps the social rules are an approach to the same question. Personally, I found that my productivity went up as a result of not being around jerks, and that probably means I should continue to put myself in similar situations. I think a greater degree of self-awareness also came hand in hand with this. I’d say I’m generally a more sensitive person than I was before I started &lt;span class="caps"&gt;RC&lt;/span&gt;, or at least I do my best to be careful of the effects and unintended consequences that my words and actions can have on&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;I think one skill that many people pick up at &lt;span class="caps"&gt;RC&lt;/span&gt; is an improved ability to work independently. &lt;span class="caps"&gt;RC&lt;/span&gt; is more or less an exercise in unsupervised working and learning, so it makes sense that three months of practice might lead to some improvement. From my point of view, one of the most valuable traits you can develop to be successful at working on anything independently is persistence. In addition, programming itself requires a particular type and quantity of persistence. The experience of programming is mostly having things not work, right up until the moment when they finally do. Programming also seems to follow the Pareto principle in that 20% of the code takes up 80% of the time. Working on something on your own inherently requires persistence – after all, nobody is telling you what to do, and your source of motivation has to come from within. This seems to be something that most programmers are perpetually dealing with, and the excitement to work on your own projects definitely ebbs and&amp;nbsp;flows.&lt;/p&gt;
&lt;p&gt;Every programmer is familiar with the feeling of being stuck. In addition to persistence, it takes a particular set of skills to unstick yourself when you don’t know what to do next. Getting over these hurdles seems to be one of the skills that sets apart more experienced developers. They have a lot of experience being stuck, they’re comfortable with the feelings involved, and they have a set of strategies to get themselves out. I think the second point is particularly important. The feeling of being stuck can be really uncomfortable, and the tendency is to want to just escape that feeling, even if it means shying away from the challenge involved. It can be so tempting to switch to an easier task or go do something else entirely, and the discipline to avoid doing that is critical. Another skill involved in being stuck is knowing how and when to ask for help. &lt;a href="https://jvns.ca/blog/good-questions/"&gt;Julia Evans&lt;/a&gt; and others have written a lot about this, so I can just say here that I learned a lot at &lt;span class="caps"&gt;RC&lt;/span&gt; about getting help from&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;Something I valued while reading other return statements was the personal advice to those who are either about to start a batch at &lt;span class="caps"&gt;RC&lt;/span&gt; or are currently attending. So, what advice do I have for future Recursers? When it comes to Advice on the Internet&amp;trade;, I think it’s important to be aware of the inherent connection between advice and the personal experience of the person giving it. You might ask several people their opinions about how to “do &lt;span class="caps"&gt;RC&lt;/span&gt; well” and get different or conflicting opinions. Ultimately, the first thing to remember is that there is no one right way to approach your batch (oops, I guess that sentence is subject to the same caveat). If you’re spending 3 months at &lt;span class="caps"&gt;RC&lt;/span&gt;, hopefully you showed up strongly motivated to improve as a programmer. There are so many different ways to improve as a programmer and “making computers do things” contains a multitude of possibilities. Here are a few specific pieces of advice, but note that they are &lt;em&gt;not&lt;/em&gt; necessary to make the most of your&amp;nbsp;time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep making forward progress. It’s easy to be stressed about whether you’re working on the right thing, and if you are, that’s good! It means you’re being intentional and thoughtful. At the same time, you can end up biased too far in this direction. A solution is to focus on making progress of some sort every day regardless of what exactly it is. Then, come up for air maybe once or twice a week and decide whether you’re accomplishing your larger goals. If not, the solution is easy: change what you’re working on! At one point during my batch I was feeling kind of stuck, and one of the facilitators suggested that I intentionally start (and not finish) five things in a week to make starting a project feel like less of a big deal. This was a great way to build up some forward momentum. There are no prizes for finishing things – it’s all about learning the most you can. As a sidenote, “finishing things” is itself a skill you can improve at. If that’s something you’d like, well, then just kidding – there are definitely prizes for finishing&amp;nbsp;things!&lt;/li&gt;
&lt;li&gt;If it sounds like a thing you might enjoy doing, consider keeping a daily or weekly list/journal of how you spent your time. It will be easy to forget the smaller things that you worked on and learned. Perhaps somebody will ask you in the future “what did you work on at &lt;span class="caps"&gt;RC&lt;/span&gt;” and you’ll have an easier time answering if you actually wrote it down. At the very least, it will be fun to go back and remember what you did in a few months or years. This is also another good way to help identify if you’re stuck and/or if you’re accomplishing your learning&amp;nbsp;goals.&lt;/li&gt;
&lt;li&gt;You will probably write less code than you planned to and finish fewer projects than you thought you would. That’s ok. This is something many people at &lt;span class="caps"&gt;RC&lt;/span&gt; have trouble with – perhaps everybody just shows up with overly high expectations. It’s easy to think, “this is going to be so great, I’ll be able to work without distraction on whatever I want rather than what somebody is telling me to do. I’m going to be more productive than I’ve ever been in my life.” While it’s true that some people get a lot done at &lt;span class="caps"&gt;RC&lt;/span&gt;, 12 weeks isn’t long, and you’ll inevitably feel yourself being pulled in a dozen different directions at once. During my batch I learned about the basics of network programming, cryptography fundamentals, wrote some C code for the first time, dabbled in some other programming languages, learned about various models of concurrency in Python, and finished part of a web server/web framework (also in Python). Many of the little things I worked on were unrelated and very few of them resulted in a big, tangible piece of finished work. However, when viewed through the lens of accomplishing my learning goals, all of these projects served their&amp;nbsp;purpose.&lt;/li&gt;
&lt;li&gt;If you’re trying to grow as a programmer chances are good you’re working on something new or outside of your comfort zone. As &lt;a href="https://martin.kleppmann.com/2015/10/11/recurse-center-joy-of-learning.html"&gt;Martin Kleppmann&lt;/a&gt; describes, &lt;em&gt;everybody&lt;/em&gt; at &lt;span class="caps"&gt;RC&lt;/span&gt; is a beginner at the thing they are working on. When you’re trying to do something you haven’t done before, making forward progress can be difficult. It’s easy to get discouraged when you imagine some other programmer doing the same project easily. One big realization I had at &lt;span class="caps"&gt;RC&lt;/span&gt; is that when you see an experienced programmer writing code fluently and it looks like it’s flowing out of their fingers fully formed, that means they have probably written something similar before. Maybe a good exercise to drive this point home would be to go back to a project you’ve worked on in the past and write it again from scratch. My guess is you’ll be shocked by how much faster you&amp;nbsp;are.&lt;/li&gt;
&lt;li&gt;Embrace living in New York (if it’s your thing). Don’t come into the space every Friday. Go exploring. Eat all of the food. Maybe even do some touristy things. But, you don’t have to do any of the above if you feel like just focusing on programming, or if the city overwhelms you. There’s so much going on that you’re inevitably going to miss out on something; do whatever you feel is right for you in the&amp;nbsp;moment.&lt;/li&gt;
&lt;li&gt;Get to know your batchmates. Talk with them about programming. Talk with them about whatever they did before &lt;span class="caps"&gt;RC&lt;/span&gt;. As I mentioned before, many of my favorite moments came from talking about programming with people who know more or have more experience than I do. You will also see faces you don’t recognize in the space, especially on alumni Thursdays. You should get to know them as well. Luckily, you have a natural icebreaker: just ask them what they worked on during their batch or what they’ve been working on&amp;nbsp;since.&lt;/li&gt;
&lt;li&gt;At some point the time will come where you realize that you’ll have to go back to the real world soon, and it’s common to have a mid-batch slump as a result. Being at &lt;span class="caps"&gt;RC&lt;/span&gt; is a unique and freeing experience, somewhat magical and set apart from the real world. It can feel like it will be over before you really get to fully experience it. After &lt;span class="caps"&gt;RC&lt;/span&gt; ended, I realized that 12 weeks is actually the perfect length of time. In the months since, I’ve revisited and consolidated so much of the learning I did at &lt;span class="caps"&gt;RC&lt;/span&gt;. Concepts that didn’t stick right away formed new connections and built upon themselves later. Also, a big part of what makes &lt;span class="caps"&gt;RC&lt;/span&gt; great is alumni going out into the world to share the social rules and openness towards learning with those who haven’t had the chance to attend&amp;nbsp;themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Towards the end of my batch, I started to panic because it felt like I hadn’t finished everything I wanted and that I probably wouldn’t be able to. Eventually I came to what was ultimately the most important realization of my three months. The &lt;span class="caps"&gt;RC&lt;/span&gt; motto is “never graduate.” I understand it as having two meanings. The first is that you are always a welcome member of the community even when your batch has ended. The second is that you don’t have to stop doing the things you started doing at &lt;span class="caps"&gt;RC&lt;/span&gt; just because your batch is over. You can keep working on the same projects and applying what you learned in everything you work on, programming-related or&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;And of course, there’s always the option of doing a second&amp;nbsp;batch…&lt;/p&gt;</content><category term="journal"></category></entry></feed>